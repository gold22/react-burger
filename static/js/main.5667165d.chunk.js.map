{"version":3,"sources":["components/modal-overlay/modal-overlay.module.css","components/ingredient-cards/ingredient-cards.module.css","components/ingredient-tabs/ingredient-tabs.module.css","pages/constructor-page/constructor-page.module.css","components/dialog-page/dialog-page.module.css","components/error-message/error-message.module.css","components/form/form.module.css","components/order-cards/order-cards.module.css","components/profile-form/profile-form.module.css","pages/order-info-page/order-info-page.module.css","components/orders-status/orders-status.module.css","components/order-info/order-info.module.css","services/types/index.ts","services/hooks.ts","components/app-nav-link/app-nav-link.tsx","components/app-header/app-header.tsx","utils/ingredients.ts","services/types/api.ts","services/constants/constructor.ts","services/actions/constructor.ts","components/constructor-element/constructor-element.tsx","components/constructor-elements/constructor-elements.tsx","components/modal-overlay/modal-overlay.tsx","components/modal/modal.tsx","components/error-dialog/error-dialog.tsx","images/done.gif","components/order-details/order-details.tsx","services/constants/order.ts","utils/error.ts","services/api-client.ts","components/burger-constructor/burger-constructor.tsx","services/actions/order.ts","components/ingredient-card/ingredient-card.tsx","components/ingredient-cards/ingredient-cards.tsx","components/ingredient-tabs/ingredient-tabs.tsx","components/burger-ingredients/burger-ingredients.tsx","pages/constructor-page/constructor-page.tsx","components/dialog-page/dialog-page.tsx","components/ingredient-details/ingredient-details.tsx","components/error-message/error-message.tsx","services/constants/ingredient-details.ts","services/actions/ingredient-details.ts","pages/ingredient-details-page/ingredient-details-page.tsx","components/form/form.tsx","services/constants/auth.ts","services/actions/auth.ts","pages/login-page/login-page.tsx","pages/logout-page/logout-page.tsx","services/constants/reset-password.ts","pages/forgot-password-page/forgot-password-page.tsx","services/actions/reset-password.ts","components/profile-menu/profile-menu.tsx","utils/string.ts","utils/orders.ts","components/order-card/order-card.tsx","components/order-cards/order-cards.tsx","services/constants/user-orders-list.ts","pages/profile-orders-page/profile-orders-page.tsx","services/actions/user-orders-list.ts","components/profile-form/profile-form.tsx","pages/profile-page/profile-page.tsx","pages/register-page/register-page.tsx","pages/reset-password-page/reset-password-page.tsx","components/orders-status/orders-status.tsx","services/constants/orders-list.ts","pages/orders-page/orders-page.tsx","services/actions/orders-list.ts","components/order-info/order-info.tsx","services/constants/order-info.ts","services/actions/order-info.ts","pages/order-info-page/order-info-page.tsx","components/order-info-dialog/order-info-dialog.tsx","components/ingredient-details-dialog/ingredient-details-dialog.tsx","components/protected-route/protected-route.tsx","services/constants/ingredients-list.ts","components/app/app.tsx","services/actions/ingredients-list.ts","services/reducers/auth.ts","services/reducers/constructor.ts","services/reducers/ingredient-details.ts","services/reducers/ingredients-list.ts","services/reducers/order.ts","services/reducers/order-info.ts","services/reducers/orders-list.ts","services/reducers/user-orders-list.ts","services/reducers/reset-password.ts","services/reducers/index.ts","services/middleware/socket-middleware.ts","services/store.ts","reportWebVitals.ts","index.tsx","pages/login-page/login-page.module.css","components/order-card/order-card.module.css","components/app-header/app-header.module.css","components/modal/modal.module.css","components/burger-constructor/burger-constructor.module.css","components/ingredient-details/ingredient-details.module.css","pages/profile-page/profile-page.module.css","pages/orders-page/orders-page.module.css","pages/profile-orders-page/profile-orders-page.module.css","components/ingredient-card/ingredient-card.module.css","components/profile-menu/profile-menu.module.css","components/constructor-element/constructor-element.module.css","components/constructor-elements/constructor-elements.module.css","components/burger-ingredients/burger-ingredients.module.css","components/app-nav-link/app-nav-link.module.css"],"names":["module","exports","IngredientType","useDispatch","dispatchHook","useSelector","selectorHook","AppNavLink","icon","text","to","exact","props","match","useRouteMatch","iconType","isExact","textColor","className","styles","main","type","AppHeader","header","headerContent","leftNav","data-testid","logo","rightNav","TApiOrderStatus","getIngredient","ingredientId","ingredients","find","ingredient","id","getIngredientsPrice","reduce","sum","price","getIngredientsIds","map","isBun","Bun","getBun","SET_BUN","ADD_INGREDIENT","REMOVE_INGREDIENT","REMOVE_INGREDIENTS","MOVE_INGREDIENT","setBun","bun","ConstructorElement","index","dispatch","useDrag","item","dragRef","useDrop","accept","drop","oldIndex","newIndex","uuid","addIngredient","dropRef","ref","data-type","optional","name","thumbnail","imageMobile","handleClose","removeIngredient","isLocked","ConstructorElements","state","burgerConstructor","filter","optionalItems","length","ModalOverlay","children","onClick","event","stopPropagation","Modal","title","visible","onClose","React","useEffect","handleKeyDown","key","document","addEventListener","removeEventListener","container","getElementById","handleCloseClick","ReactDOM","createPortal","closeArea","closeIcon","content","ErrorDialog","message","OrderDetails","order","number","src","donePath","alt","CREATE_ORDER_REQUEST","CREATE_ORDER_SUCCESS","CREATE_ORDER_ERROR","getErrorMessage","error","Error","ApiClient","url","wsUrl","this","a","fetch","result","data","ingredientsIds","body","method","headers","Authorization","getAccessToken","JSON","stringify","orderNumber","orders","user","setAccessToken","accessToken","setRefreshToken","refreshToken","token","getRefreshToken","email","password","options","response","status","updateToken","resultText","parse","success","WebSocket","getOrdersSocketUrl","slice","getUserOrdersSocketUrl","localStorage","getItem","setItem","removeItem","BurgerConstructor","useState","showDetails","setShowDetails","ingredientsCount","orderPrice","history","useHistory","canDrop","dropArea","submit","total","size","isCreating","isAuthenticated","getState","apiClient","createOrder","replace","pathname","creationError","IngredientCard","count","location","useLocation","image","push","generatePath","background","IngredientCards","forwardRef","cards","IngredientTabs","value","onChange","handleOnClick","tab","active","Sauce","Main","BurgerIngredients","currentTab","setCurrentTab","ingredientsList","categories","useRef","sauce","buns","useMemo","sauces","isSauce","mains","isMain","current","scrollIntoView","behavior","onScroll","e","scrollTop","target","bunOffset","sauceOffset","Math","abs","offsetTop","mainOffset","minOffset","min","ConstructorPage","DndProvider","backend","HTML5Backend","DialogPage","IngredientDetails","calories","carbohydrates","fat","imageLarge","proteins","details","detail","ErrorMessage","SHOW_INGREDIENT_DETAILS","HIDE_INGREDIENT_DETAILS","showIngredientDetails","hideIngredientDetails","IngredientDetailsPage","useParams","Form","onSubmit","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_ERROR","LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGIN_USER_ERROR","LOGOUT_USER_REQUEST","LOGOUT_USER_SUCCESS","LOGOUT_USER_ERROR","GET_USER_REQUEST","GET_USER_SUCCESS","GET_USER_ERROR","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_ERROR","getUser","LoginPage","setEmail","setPassword","auth","loadError","from","preventDefault","isLoggingIn","logInUser","loginError","placeholder","links","LogoutPage","logOutUser","logoutError","SEND_RESET_USER_PASSWORD_EMAIL_REQUEST","SEND_RESET_USER_PASSWORD_EMAIL_SUCCESS","SEND_RESET_USER_PASSWORD_EMAIL_ERROR","RESET_EMAIL_SENT","RESET_USER_PASSWORD_REQUEST","RESET_USER_PASSWORD_SUCCESS","RESET_USER_PASSWORD_ERROR","RESET_PASSWORD_RESET","ForgotPasswordPage","resetPassword","isEmailSent","isSendingEmail","sendResetUserPasswordEmail","sendingEmailError","loginStyles","ProfileMenu","getNavLinkClassName","isActive","menuItem","mapOrder","_id","createdAt","Date","updatedAt","mapOrders","localizeDate","date","str","diff","getTime","rtf","Intl","RelativeTimeFormat","numeric","days","format","floor","charAt","toUpperCase","time","DateTimeFormat","hour","minute","timeZoneName","localizeStatus","Created","Pending","OrderCard","showStatus","orderIngredients","ingredientIds","getIngredients","restIngredientsCount","displayedIngredients","maxIngredientsCount","reverse","statusClass","Done","card","footer","icons","style","left","opacity","OrderCards","USER_ORDERS_LIST_CONNECTION_OPEN","USER_ORDERS_LIST_CONNECTION_CLOSE","USER_ORDERS_LIST_CONNECTION_SUCCESS","USER_ORDERS_LIST_CONNECTION_ERROR","USER_ORDERS_LIST_CONNECTION_CLOSED","USER_ORDERS_LIST_RECEIVED","ProfileOrdersPage","userOrdersList","connectionError","menu","ProfileForm","setName","hasChanges","updateUser","updateError","buttons","ProfilePage","form","space","RegisterPage","isRegistering","registerUser","registrationError","ResetPasswordPage","setToken","isPasswordReset","isResettingPassword","resetUserPassword","resetPasswordError","OrdersStatus","ordersList","totalToday","doneOrders","pendingOrders","orderPanels","doneOrderPanel","pendingOrderPanel","totalShadow","ORDERS_LIST_CONNECTION_OPEN","ORDERS_LIST_CONNECTION_CLOSE","ORDERS_LIST_CONNECTION_SUCCESS","ORDERS_LIST_CONNECTION_ERROR","ORDERS_LIST_CONNECTION_CLOSED","ORDERS_LIST_RECEIVED","OrdersPage","list","OrderInfo","ingredientsMap","Map","groupItem","get","set","Array","values","groupIngredients","label","GET_ORDER_REQUEST","GET_ORDER_SUCCESS","GET_ORDER_ERROR","CLEAR_ORDER","clearOrder","getOrder","OrderInfoPage","orderInfo","OrderInfoDialog","IngredientDetailsDialog","ProtectedRoute","path","render","GET_INGREDIENTS_REQUEST","GET_INGREDIENTS_SUCCESS","GET_INGREDIENTS_ERROR","App","image_large","image_mobile","isLoading","goBack","initialState","isLoggingOut","isUpdating","isConnected","rootReducer","combineReducers","action","splice","ingredientDetails","socketMiddleware","createSocket","wsActions","store","socket","next","open","close","onOpen","onError","onMessage","onopen","onerror","onclose","wasClean","code","onmessage","CONNECTING","readyState","currentTarget","OPEN","ordersListActions","userOrdersListActions","enhancer","composeWithDevTools","applyMiddleware","thunk","withExtraArgument","createOrdersSocket","createUserOrdersSocket","createStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","basename","process"],"mappings":"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","file":"static/js/main.5667165d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"modal-overlay_main__3XSUK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"ingredient-cards_cards__1STKv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"ingredient-tabs_main__34-bT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"constructor-page_main__tXA5s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"dialog-page_main__1pEvH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"error-message_main__qQc8H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"form_main__8p870\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"order-cards_cards__14mAS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"profile-form_buttons__2L2R5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"order-info-page_main__3POTC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"orders-status_main__3rKHb\",\"orderPanels\":\"orders-status_orderPanels__1FklD\",\"orderPanel\":\"orders-status_orderPanel__2S4sq\",\"doneOrderPanel\":\"orders-status_doneOrderPanel__fGZgp orders-status_orderPanel__2S4sq\",\"pendingOrderPanel\":\"orders-status_pendingOrderPanel__1kp-c orders-status_orderPanel__2S4sq\",\"orders\":\"orders-status_orders__2_eB7\",\"totalShadow\":\"orders-status_totalShadow__3k6yJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"order-info_main__2sb6R\",\"ingredients\":\"order-info_ingredients__nDvza\",\"ingredient\":\"order-info_ingredient__19WK9\",\"label\":\"order-info_label__2rmjN\",\"icon\":\"order-info_icon__1KMBN\",\"price\":\"order-info_price__p6pSH\",\"footer\":\"order-info_footer__VdhPs\"};","import { Location } from 'history';\r\nimport { TApiOrderStatus } from './api';\r\n\r\nexport type TIngredient = {\r\n    uuid?: string;\r\n    id: string;\r\n    name: string;\r\n    type: string;\r\n    proteins: number;\r\n    fat: number;\r\n    carbohydrates: number;\r\n    calories: number;\r\n    price: number;\r\n    image: string;\r\n    imageLarge: string;\r\n    imageMobile: string;\r\n};\r\n\r\nexport type TIngredients = Array<TIngredient>;\r\n\r\nexport type TIngredientGroupItem = {\r\n    ingredient: TIngredient;\r\n    count: number;\r\n};\r\n\r\nexport type TIngredientGroupItems = Array<TIngredientGroupItem>;\r\n\r\nexport type TIngredientDragItem = {\r\n    ingredient?: TIngredient;\r\n    index?: number;\r\n};\r\n\r\nexport type TLocationState = {\r\n    background?: Location;\r\n    from?: Location;\r\n};\r\n\r\nexport enum IngredientType {\r\n    Bun = 'bun',\r\n    Sauce = 'sauce',\r\n    Main = 'main',\r\n}\r\n\r\nexport type TOrder = {\r\n    id: string;\r\n    number: number;\r\n    name: string;\r\n    status: TApiOrderStatus;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    ingredients: Array<string>;\r\n};\r\n\r\nexport type TOrders = Array<TOrder>;\r\n","import {\r\n    TypedUseSelectorHook,\r\n    useDispatch as dispatchHook,\r\n    useSelector as selectorHook,\r\n} from 'react-redux';\r\nimport { TDispatch, TRootState, TThunk } from './types/store';\r\n\r\nexport const useDispatch = () => dispatchHook<TDispatch | TThunk>();\r\nexport const useSelector: TypedUseSelectorHook<TRootState> = selectorHook;\r\n","import React from 'react';\r\nimport { NavLink, useRouteMatch } from 'react-router-dom';\r\nimport { BurgerIcon, ListIcon, ProfileIcon } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport styles from './app-nav-link.module.css';\r\n\r\ntype TAppNavLinkProps = {\r\n    icon: 'burger' | 'list' | 'profile';\r\n    text: string;\r\n    to: string;\r\n    exact?: boolean;\r\n};\r\n\r\nconst AppNavLink: React.FC<TAppNavLinkProps> = ({ icon, text, to, exact, ...props }) => {\r\n    const match = useRouteMatch(to);\r\n    const iconType = match && (match.isExact || !exact) ? 'primary' : 'secondary';\r\n    const textColor = match && (match.isExact || !exact) ? 'text_color_primary' : 'text_color_inactive';\r\n    return (\r\n        // eslint-disable-next-line react/jsx-props-no-spreading\r\n        <NavLink to={to} exact={exact} className={`${styles.main} pl-5 pr-5 pb-4 pt-4`} {...props}>\r\n            {icon === 'burger' && <BurgerIcon type={iconType} />}\r\n            {icon === 'list' && <ListIcon type={iconType} />}\r\n            {icon === 'profile' && <ProfileIcon type={iconType} />}\r\n            <p className={`text text_type_main-default pl-2 ${textColor}`}>{text}</p>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default AppNavLink;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Logo } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport AppNavLink from '../app-nav-link/app-nav-link';\r\nimport styles from './app-header.module.css';\r\n\r\nconst AppHeader = () => (\r\n    <header className={`${styles.header} ml-10 mr-10 mt-10`}>\r\n        <div className={styles.headerContent}>\r\n            <nav className={styles.leftNav}>\r\n                <AppNavLink icon=\"burger\" text=\"Конструктор\" to=\"/\" exact data-testid=\"constructor-link\" />\r\n                <AppNavLink icon=\"list\" text=\"Лента заказов\" to=\"/feed\" />\r\n            </nav>\r\n            <div className={styles.logo}>\r\n                <Link to=\"/\">\r\n                    <Logo />\r\n                </Link>\r\n            </div>\r\n            <nav className={styles.rightNav}>\r\n                <AppNavLink icon=\"profile\" text=\"Личный кабинет\" to=\"/profile\" />\r\n            </nav>\r\n        </div>\r\n    </header>\r\n);\r\n\r\nexport default AppHeader;\r\n","import {\r\n    IngredientType,\r\n    TIngredient,\r\n    TIngredientGroupItem,\r\n    TIngredientGroupItems,\r\n    TIngredients,\r\n} from '../services/types';\r\n\r\nexport const getIngredient = (\r\n    ingredientId: string,\r\n    ingredients: TIngredients,\r\n): TIngredient | undefined => (\r\n    ingredients.find((ingredient) => ingredientId === ingredient.id)\r\n);\r\n\r\nexport const getIngredientCount = (ingredientId: string, ingredients: TIngredients): number => (\r\n    ingredients.reduce(\r\n        (count, ingredient) => (ingredientId === ingredient.id ? count + 1 : count),\r\n        0,\r\n    )\r\n);\r\n\r\nexport const getIngredients = (\r\n    ingredientIds: Array<string>,\r\n    ingredients: TIngredients,\r\n): TIngredients => {\r\n    const result: TIngredients = [];\r\n    for (const ingredientId of ingredientIds) {\r\n        const ingredient = getIngredient(ingredientId, ingredients);\r\n        if (ingredient) {\r\n            result.push(ingredient);\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const groupIngredients = (\r\n    ingredientIds: Array<string>,\r\n    ingredients: TIngredients,\r\n): TIngredientGroupItems => {\r\n    const ingredientsMap = new Map<string, TIngredientGroupItem>();\r\n    for (const ingredientId of ingredientIds) {\r\n        const groupItem = ingredientsMap.get(ingredientId);\r\n        if (groupItem) {\r\n            groupItem.count += 1;\r\n        } else {\r\n            const ingredient = getIngredient(ingredientId, ingredients);\r\n            if (ingredient) {\r\n                ingredientsMap.set(ingredientId, { ingredient, count: 1 });\r\n            }\r\n        }\r\n    }\r\n    return Array.from(ingredientsMap.values());\r\n};\r\n\r\nexport const getIngredientsPrice = (ingredients: TIngredients): number => (\r\n    ingredients.reduce((sum, ingredient) => sum + ingredient.price, 0)\r\n);\r\n\r\nexport const getGroupedIngredientsPrice = (items: TIngredientGroupItems): number => (\r\n    items.reduce((sum, item) => sum + item.count * item.ingredient.price, 0)\r\n);\r\n\r\nexport const getIngredientsIds = (ingredients: TIngredients): Array<string> => (\r\n    ingredients.map((ingredient) => ingredient.id)\r\n);\r\n\r\nexport const isBun = (ingredient: TIngredient): boolean => (\r\n    ingredient.type === IngredientType.Bun\r\n);\r\n\r\nexport const isSauce = (ingredient: TIngredient): boolean => (\r\n    ingredient.type === IngredientType.Sauce\r\n);\r\n\r\nexport const isMain = (ingredient: TIngredient): boolean => (\r\n    ingredient.type === IngredientType.Main\r\n);\r\n\r\nexport const getBun = (ingredients: TIngredients): TIngredient | undefined => (\r\n    ingredients.find((ingredient) => isBun(ingredient))\r\n);\r\n","export type TApiConfig = {\r\n    url: string;\r\n    wsUrl: string;\r\n};\r\n\r\nexport type TApiIngredient = {\r\n    _id: string;\r\n    name: string;\r\n    type: string;\r\n    proteins: number;\r\n    fat: number;\r\n    carbohydrates: number;\r\n    calories: number;\r\n    price: number;\r\n    image: string;\r\n    image_large: string;\r\n    image_mobile: string;\r\n};\r\n\r\nexport type TApiIngredients = Array<TApiIngredient>;\r\n\r\nexport type TApiOrderInfo = {\r\n    name: string;\r\n    order: { number: string };\r\n};\r\n\r\nexport enum TApiOrderStatus {\r\n    Pending = 'pending',\r\n    Created = 'created',\r\n    Done = 'done',\r\n}\r\n\r\nexport type TApiOrder = {\r\n    _id: string;\r\n    number: number;\r\n    name: string;\r\n    status: TApiOrderStatus;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    ingredients: Array<string>;\r\n};\r\n\r\nexport type TApiOrders = {\r\n    orders: Array<TApiOrder>;\r\n    total: number;\r\n    totalToday: number;\r\n};\r\n\r\nexport type TApiUser = {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n};\r\n\r\nexport type TApiUserInfo = {\r\n    name: string;\r\n    email: string;\r\n};\r\n\r\nexport type TApiUserCredentials = {\r\n    email: string;\r\n    password: string;\r\n};\r\n\r\nexport type TApiUserResetPasswordInfo = {\r\n    password: string;\r\n    token: string;\r\n};\r\n","export const SET_BUN: 'SET_BUN' = 'SET_BUN';\r\nexport const ADD_INGREDIENT: 'ADD_INGREDIENT' = 'ADD_INGREDIENT';\r\nexport const REMOVE_INGREDIENT: 'REMOVE_INGREDIENT' = 'REMOVE_INGREDIENT';\r\nexport const REMOVE_INGREDIENTS: 'REMOVE_INGREDIENTS' = 'REMOVE_INGREDIENTS';\r\nexport const MOVE_INGREDIENT: 'MOVE_INGREDIENT' = 'MOVE_INGREDIENT';\r\n","import { v4 as uuid } from 'uuid';\r\nimport {\r\n    SET_BUN,\r\n    ADD_INGREDIENT,\r\n    REMOVE_INGREDIENT,\r\n    REMOVE_INGREDIENTS,\r\n    MOVE_INGREDIENT,\r\n} from '../constants/constructor';\r\nimport { TIngredient } from '../types';\r\nimport {\r\n    IAddIngredientAction,\r\n    IMoveIngredientAction,\r\n    IRemoveIngredientAction,\r\n    IRemoveIngredientsAction,\r\n    ISetBunAction,\r\n} from '../types/actions/constructor';\r\n\r\nexport const setBun = (bun: TIngredient): ISetBunAction => ({\r\n    type: SET_BUN,\r\n    bun,\r\n});\r\n\r\nexport const addIngredient = (ingredient: TIngredient, index: number): IAddIngredientAction => ({\r\n    type: ADD_INGREDIENT,\r\n    ingredient: {\r\n        ...ingredient,\r\n        uuid: uuid(),\r\n    },\r\n    index,\r\n});\r\n\r\nexport const removeIngredient = (index: number): IRemoveIngredientAction => ({\r\n    type: REMOVE_INGREDIENT,\r\n    index,\r\n});\r\n\r\nexport const removeIngredients = (): IRemoveIngredientsAction => ({\r\n    type: REMOVE_INGREDIENTS,\r\n});\r\n\r\nexport const moveIngredient = (oldIndex: number, newIndex: number): IMoveIngredientAction => ({\r\n    type: MOVE_INGREDIENT,\r\n    oldIndex,\r\n    newIndex,\r\n});\r\n","import React from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport {\r\n    ConstructorElement as ConstructorElementComponent,\r\n    DragIcon,\r\n} from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { isBun } from '../../utils/ingredients';\r\nimport {\r\n    addIngredient,\r\n    moveIngredient,\r\n    removeIngredient,\r\n    setBun,\r\n} from '../../services/actions/constructor';\r\nimport { TIngredient, TIngredientDragItem } from '../../services/types';\r\nimport { useDispatch } from '../../services/hooks';\r\nimport styles from './constructor-element.module.css';\r\n\r\ntype TConstructorElementProps = {\r\n    ingredient: TIngredient;\r\n    type: 'top' | 'bottom' | 'center';\r\n    index: number;\r\n};\r\n\r\nconst ConstructorElement: React.FC<TConstructorElementProps> = ({ ingredient, type, index }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [, dragRef] = useDrag<TIngredientDragItem, unknown, unknown>({\r\n        type: 'ingredient',\r\n        item: { index },\r\n    });\r\n\r\n    const [, dropRef] = useDrop<TIngredientDragItem, unknown, unknown>({\r\n        accept: 'ingredient',\r\n        drop(item) {\r\n            if (typeof item.index !== 'undefined') {\r\n                if (item.index !== index) {\r\n                    dispatch(moveIngredient(item.index, index));\r\n                }\r\n            }\r\n            if (typeof item.ingredient !== 'undefined') {\r\n                if (isBun(item.ingredient)) {\r\n                    dispatch(setBun(item.ingredient));\r\n                } else {\r\n                    dispatch(addIngredient(item.ingredient, index));\r\n                }\r\n            }\r\n        },\r\n    });\r\n\r\n    const handleRemoveIngredient = () => {\r\n        dispatch(removeIngredient(index));\r\n    };\r\n\r\n    if (type === 'center') {\r\n        return (\r\n            <div ref={dragRef} data-type=\"element-drag-area\">\r\n                <div className={`${styles.optional} pr-1`} ref={dropRef} data-type=\"element-drop-area\">\r\n                    <DragIcon type=\"primary\" />\r\n                    <ConstructorElementComponent\r\n                        text={ingredient.name}\r\n                        price={ingredient.price}\r\n                        thumbnail={ingredient.imageMobile}\r\n                        handleClose={handleRemoveIngredient}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className={`${styles.main} pl-8`} ref={dropRef} data-type=\"element-drop-area\">\r\n            <ConstructorElementComponent\r\n                type={type}\r\n                isLocked\r\n                text={`${ingredient.name} ${type === 'top' ? '(верх)' : '(низ)'}`}\r\n                price={ingredient.price}\r\n                thumbnail={ingredient.imageMobile}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConstructorElement;\r\n","import React from 'react';\r\nimport { useSelector } from '../../services/hooks';\r\nimport ConstructorElement from '../constructor-element/constructor-element';\r\nimport { getBun, isBun } from '../../utils/ingredients';\r\nimport { TIngredient } from '../../services/types';\r\nimport styles from './constructor-elements.module.css';\r\n\r\nconst ConstructorElements = () => {\r\n    const { bun, ingredients } = useSelector((state) => ({\r\n        bun: getBun(state.burgerConstructor.ingredients),\r\n        ingredients: state.burgerConstructor.ingredients.filter(\r\n            (ingredient: TIngredient) => !isBun(ingredient),\r\n        ),\r\n    }));\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            {bun && (\r\n                <ConstructorElement\r\n                    index={0}\r\n                    type=\"top\"\r\n                    ingredient={bun}\r\n                />\r\n            )}\r\n            <div className={`${styles.optionalItems} custom-scroll`}>\r\n                {ingredients.map((ingredient: TIngredient, index: number) => (\r\n                    <ConstructorElement\r\n                        key={ingredient.uuid}\r\n                        index={bun ? index + 1 : index}\r\n                        type=\"center\"\r\n                        ingredient={ingredient}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {bun && (\r\n                <ConstructorElement\r\n                    index={ingredients.length + 1}\r\n                    type=\"bottom\"\r\n                    ingredient={bun}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConstructorElements;\r\n","import React from 'react';\r\nimport styles from './modal-overlay.module.css';\r\n\r\ntype TModalOverlayProps = {\r\n    onClick: () => void;\r\n};\r\n\r\nconst ModalOverlay: React.FC<TModalOverlayProps> = ({ children, onClick }) => {\r\n    const handleOnClick: React.MouseEventHandler<HTMLDivElement> = (event) => {\r\n        onClick();\r\n        event.stopPropagation();\r\n    };\r\n    return (\r\n        <div className={styles.main} onClick={handleOnClick}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalOverlay;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CloseIcon } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport ModalOverlay from '../modal-overlay/modal-overlay';\r\nimport styles from './modal.module.css';\r\n\r\ntype TModalProps = {\r\n    title: string;\r\n    visible: boolean;\r\n    onClose: () => void;\r\n};\r\n\r\nconst Modal: React.FC<TModalProps> = ({ title, visible, children, onClose }) => {\r\n    React.useEffect(() => {\r\n        if (!visible) {\r\n            return () => {};\r\n        }\r\n        const handleKeyDown = (event: KeyboardEvent) => {\r\n            if (event.key === 'Escape') {\r\n                onClose();\r\n            }\r\n        };\r\n        document.addEventListener('keydown', handleKeyDown);\r\n\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, [visible, onClose]);\r\n\r\n    if (!visible) {\r\n        return null;\r\n    }\r\n\r\n    const container = document.getElementById('modal');\r\n    if (!container) {\r\n        return null;\r\n    }\r\n\r\n    const handleCloseClick = () => {\r\n        onClose();\r\n    };\r\n    const handleModalClick: React.MouseEventHandler<HTMLDivElement> = (event) => {\r\n        event.stopPropagation();\r\n    };\r\n    return ReactDOM.createPortal(\r\n        <ModalOverlay onClick={handleCloseClick}>\r\n            <div className={`${styles.main} pl-10 pt-10 pr-10 pb-15`} onClick={handleModalClick}>\r\n                <div className={styles.title}>\r\n                    <p className=\"text text_type_main-large\">{title}</p>\r\n                    <div className={styles.closeArea}>\r\n                        <div className={styles.closeIcon} data-type=\"close-icon\">\r\n                            <CloseIcon type=\"primary\" onClick={handleCloseClick} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.content}>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </ModalOverlay>,\r\n        container,\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport Modal from '../modal/modal';\r\n\r\ntype TErrorDialogProps = {\r\n    visible: boolean;\r\n    message: string | null;\r\n    onClose: () => void;\r\n};\r\n\r\nconst ErrorDialog: React.FC<TErrorDialogProps> = ({ visible, message, onClose }) => {\r\n    if (!visible) {\r\n        return null;\r\n    }\r\n    return (\r\n        <Modal title=\"Ошибка!\" visible onClose={onClose}>\r\n            <p className=\"text text_type_main-medium text_color_error mt-4\">{message}</p>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ErrorDialog;\r\n","export default __webpack_public_path__ + \"static/media/done.cc5a59a7.gif\";","import React from 'react';\r\nimport { useSelector } from '../../services/hooks';\r\nimport Modal from '../modal/modal';\r\nimport donePath from '../../images/done.gif';\r\n\r\ntype TOrderDetailsProps = {\r\n    visible: boolean;\r\n    onClose: () => void;\r\n};\r\n\r\nconst OrderDetails: React.FC<TOrderDetailsProps> = ({ visible, onClose }) => {\r\n    const { order } = useSelector((state) => state);\r\n\r\n    return (\r\n        <Modal title=\"\" visible={visible} onClose={onClose}>\r\n            <p className=\"text text_type_digits-large mt-4\" data-testid=\"order-number\">{order.number}</p>\r\n            <p className=\"text text_type_main-medium mt-8 mb-15\">идентификатор заказа</p>\r\n            <img src={donePath} alt=\"Заказ оформлен\" />\r\n            <p className=\"text text_type_main-default mt-15 mb-2\">Ваш заказ начали готовить</p>\r\n            <p className=\"text text_type_main-default text_color_inactive mb-15\">Дождитесь готовности на орбитальной станции</p>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default OrderDetails;\r\n","export const CREATE_ORDER_REQUEST: 'CREATE_ORDER_REQUEST' = 'CREATE_ORDER_REQUEST';\r\nexport const CREATE_ORDER_SUCCESS: 'CREATE_ORDER_SUCCESS' = 'CREATE_ORDER_SUCCESS';\r\nexport const CREATE_ORDER_ERROR: 'CREATE_ORDER_ERROR' = 'CREATE_ORDER_ERROR';\r\n","// eslint-disable-next-line import/prefer-default-export\r\nexport const getErrorMessage = (error: unknown): string => {\r\n    if (error instanceof Error) {\r\n        return error.message;\r\n    }\r\n    return 'Unknown error';\r\n};\r\n","import {\r\n    TApiConfig,\r\n    TApiIngredients,\r\n    TApiOrder,\r\n    TApiOrderInfo,\r\n    TApiUser,\r\n    TApiUserInfo,\r\n    TApiUserCredentials,\r\n    TApiUserResetPasswordInfo,\r\n} from './types/api';\r\n\r\nclass ApiClient {\r\n    private readonly url: string;\r\n\r\n    private readonly wsUrl: string;\r\n\r\n    constructor({ url, wsUrl }: TApiConfig) {\r\n        this.url = url;\r\n        this.wsUrl = wsUrl;\r\n    }\r\n\r\n    async getIngredients(): Promise<TApiIngredients> {\r\n        const result = await this.fetch(`${this.url}/ingredients`);\r\n        return result.data;\r\n    }\r\n\r\n    async createOrder(ingredientsIds: Array<string>): Promise<TApiOrderInfo> {\r\n        const body = {\r\n            ingredients: ingredientsIds,\r\n        };\r\n        return this.fetch(`${this.url}/orders`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: ApiClient.getAccessToken(),\r\n            },\r\n            body: JSON.stringify(body),\r\n        });\r\n    }\r\n\r\n    async getOrder(orderNumber: string): Promise<TApiOrder> {\r\n        const result = await this.fetch(`${this.url}/orders/${orderNumber}`);\r\n        if (result.orders.length !== 1) {\r\n            throw new Error(`Заказ #${orderNumber} не найден`);\r\n        }\r\n        return result.orders[0];\r\n    }\r\n\r\n    async registerUser(user: TApiUser): Promise<TApiUserInfo> {\r\n        const result = await this.fetch(`${this.url}/auth/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(user),\r\n        });\r\n        ApiClient.setAccessToken(result.accessToken);\r\n        ApiClient.setRefreshToken(result.refreshToken);\r\n        return result.user;\r\n    }\r\n\r\n    async logInUser(user: TApiUserCredentials): Promise<TApiUserInfo> {\r\n        const result = await this.fetch(`${this.url}/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(user),\r\n        });\r\n        ApiClient.setAccessToken(result.accessToken);\r\n        ApiClient.setRefreshToken(result.refreshToken);\r\n        return result.user;\r\n    }\r\n\r\n    async logOutUser(): Promise<void> {\r\n        await this.fetch(`${this.url}/auth/logout`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: ApiClient.getAccessToken(),\r\n            },\r\n            body: JSON.stringify({ token: ApiClient.getRefreshToken() }),\r\n        });\r\n        ApiClient.setAccessToken(null);\r\n        ApiClient.setRefreshToken(null);\r\n    }\r\n\r\n    async sendResetUserPasswordEmail(email: string): Promise<void> {\r\n        await this.fetch(`${this.url}/password-reset`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ email }),\r\n        });\r\n    }\r\n\r\n    async resetUserPassword({ password, token }: TApiUserResetPasswordInfo): Promise<void> {\r\n        await this.fetch(`${this.url}/password-reset/reset`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ password, token }),\r\n        });\r\n    }\r\n\r\n    async getUser(): Promise<TApiUserInfo> {\r\n        const result = await this.fetch(`${this.url}/auth/user`, {\r\n            headers: {\r\n                Authorization: ApiClient.getAccessToken(),\r\n            },\r\n        });\r\n        return result.user;\r\n    }\r\n\r\n    async updateUser(user: TApiUser): Promise<TApiUserInfo> {\r\n        const result = await this.fetch(`${this.url}/auth/user`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: ApiClient.getAccessToken(),\r\n            },\r\n            body: JSON.stringify(user),\r\n        });\r\n        return result.user;\r\n    }\r\n\r\n    async updateToken(): Promise<void> {\r\n        const result = await this.fetch(`${this.url}/auth/token`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: ApiClient.getAccessToken(),\r\n            },\r\n            body: JSON.stringify({ token: ApiClient.getRefreshToken() }),\r\n        });\r\n        ApiClient.setAccessToken(result.accessToken);\r\n        ApiClient.setRefreshToken(result.refreshToken);\r\n    }\r\n\r\n    async fetch(url: string, options: RequestInit = {}): Promise<any> {\r\n        let response = await fetch(url, options);\r\n        if (response.status === 403 && options.headers && 'Authorization' in options.headers) {\r\n            await this.updateToken();\r\n            response = await fetch(url, {\r\n                ...options,\r\n                headers: {\r\n                    ...options.headers,\r\n                    Authorization: ApiClient.getAccessToken(),\r\n                },\r\n            });\r\n        }\r\n        const resultText = await response.text();\r\n        let result = null;\r\n        try {\r\n            result = JSON.parse(resultText);\r\n        } catch (error) {\r\n        }\r\n        if (result && result.success) {\r\n            return result;\r\n        }\r\n        if (result && result.message) {\r\n            throw new Error(result.message);\r\n        }\r\n        throw new Error(\r\n            'Произошла неожиданная ошибка при обработке запроса'\r\n            + `: Код состояния HTTP - ${response.status}`\r\n            + `: HTTP ответ - ${resultText}`,\r\n        );\r\n    }\r\n\r\n    getOrdersSocketUrl(): string {\r\n        return `${this.wsUrl}/orders/all`;\r\n    }\r\n\r\n    createOrdersSocket(): WebSocket {\r\n        return new WebSocket(this.getOrdersSocketUrl());\r\n    }\r\n\r\n    getUserOrdersSocketUrl(): string {\r\n        return `${this.wsUrl}/orders`;\r\n    }\r\n\r\n    createUserOrdersSocket(): WebSocket {\r\n        const token = ApiClient.getAccessToken().slice(7);\r\n        return new WebSocket(`${this.getUserOrdersSocketUrl()}?token=${token}`);\r\n    }\r\n\r\n    static getAccessToken(): string {\r\n        return localStorage.getItem('accessToken') ?? '';\r\n    }\r\n\r\n    static setAccessToken(accessToken: string | null): void {\r\n        if (accessToken) {\r\n            localStorage.setItem('accessToken', accessToken);\r\n        } else {\r\n            localStorage.removeItem('accessToken');\r\n        }\r\n    }\r\n\r\n    static getRefreshToken(): string {\r\n        return localStorage.getItem('refreshToken') ?? '';\r\n    }\r\n\r\n    static setRefreshToken(refreshToken: string | null): void {\r\n        if (refreshToken) {\r\n            localStorage.setItem('refreshToken', refreshToken);\r\n        } else {\r\n            localStorage.removeItem('refreshToken');\r\n        }\r\n    }\r\n\r\n    static isAuthenticated(): boolean {\r\n        return !!ApiClient.getRefreshToken();\r\n    }\r\n}\r\n\r\nexport default ApiClient;\r\n","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, CurrencyIcon } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport ConstructorElements from '../constructor-elements/constructor-elements';\r\nimport ErrorDialog from '../error-dialog/error-dialog';\r\nimport OrderDetails from '../order-details/order-details';\r\nimport Modal from '../modal/modal';\r\nimport { getIngredientsPrice, isBun } from '../../utils/ingredients';\r\nimport { createOrder } from '../../services/actions/order';\r\nimport { removeIngredients, setBun } from '../../services/actions/constructor';\r\nimport ApiClient from '../../services/api-client';\r\nimport { TIngredientDragItem } from '../../services/types';\r\nimport styles from './burger-constructor.module.css';\r\n\r\nconst BurgerConstructor = () => {\r\n    const [showDetails, setShowDetails] = React.useState<boolean>(false);\r\n    const { ingredientsCount, orderPrice } = useSelector((state) => ({\r\n        ingredientsCount: state.burgerConstructor.ingredients.length,\r\n        orderPrice: getIngredientsPrice(state.burgerConstructor.ingredients),\r\n    }));\r\n    const { order } = useSelector((state) => state);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleOrderCreation = () => {\r\n        if (order.isCreating) {\r\n            // avoid redundant requests over double mouse clicks\r\n            return;\r\n        }\r\n        if (!ApiClient.isAuthenticated()) {\r\n            history.replace({ pathname: '/login' });\r\n            return;\r\n        }\r\n        dispatch(createOrder());\r\n        setShowDetails(true);\r\n    };\r\n\r\n    const handleOrderClose = () => {\r\n        dispatch(removeIngredients());\r\n        setShowDetails(false);\r\n    };\r\n\r\n    const [, dropRef] = useDrop<TIngredientDragItem, unknown, unknown>({\r\n        accept: 'ingredient',\r\n        drop(item) {\r\n            if (item.ingredient) {\r\n                dispatch(setBun(item.ingredient));\r\n            }\r\n        },\r\n        canDrop(item) {\r\n            return typeof item.ingredient !== 'undefined' && isBun(item.ingredient);\r\n        },\r\n    });\r\n\r\n    if (ingredientsCount === 0) {\r\n        return (\r\n            <section className={`${styles.main} pt-25 pl-4`}>\r\n                <div className={styles.dropArea} ref={dropRef} data-testid=\"bun-drop-area\">\r\n                    <p className=\"text text_type_main-default\">Начните сборку бургера с переноса булки сюда</p>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <section className={`${styles.main} pt-25 pl-4`} data-testid=\"burger-constructor\">\r\n            <ConstructorElements />\r\n            <div className={`${styles.submit} pt-10 pr-8`}>\r\n                <div className={styles.total}>\r\n                    <p className=\"text text_type_digits-medium\">{orderPrice}</p>\r\n                    <CurrencyIcon type=\"primary\" />\r\n                </div>\r\n                <Button type=\"primary\" size=\"large\" onClick={handleOrderCreation}>\r\n                    Оформить заказ\r\n                </Button>\r\n\r\n                <Modal\r\n                    title=\"Оформление заказа\"\r\n                    visible={showDetails && order.isCreating}\r\n                    onClose={() => {}}\r\n                >\r\n                    <p className=\"text text_type_main-medium text_color_inactive mt-8 mb-6\">Ваш заказ оформляется...</p>\r\n                </Modal>\r\n                <OrderDetails\r\n                    visible={showDetails && !order.isCreating && !order.creationError}\r\n                    onClose={handleOrderClose}\r\n                />\r\n                <ErrorDialog\r\n                    visible={showDetails && !order.isCreating && !!order.creationError}\r\n                    message={order.creationError}\r\n                    onClose={() => { setShowDetails(false); }}\r\n                />\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default BurgerConstructor;\r\n","import { getIngredientsIds } from '../../utils/ingredients';\r\nimport {\r\n    CREATE_ORDER_REQUEST,\r\n    CREATE_ORDER_SUCCESS,\r\n    CREATE_ORDER_ERROR,\r\n} from '../constants/order';\r\nimport { TDispatch, TGetState, TThunk } from '../types/store';\r\nimport ApiClient from '../api-client';\r\nimport { getErrorMessage } from '../../utils/error';\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const createOrder: TThunk = () => async (\r\n    dispatch: TDispatch,\r\n    getState: TGetState,\r\n    apiClient: ApiClient,\r\n) => {\r\n    dispatch({\r\n        type: CREATE_ORDER_REQUEST,\r\n    });\r\n    try {\r\n        const { ingredients } = getState().burgerConstructor;\r\n        const result = await apiClient.createOrder(getIngredientsIds(ingredients));\r\n        dispatch({\r\n            type: CREATE_ORDER_SUCCESS,\r\n            name: result.name,\r\n            number: result.order.number,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: CREATE_ORDER_ERROR,\r\n            message: getErrorMessage(error),\r\n        });\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { generatePath, useHistory, useLocation } from 'react-router-dom';\r\nimport { useDrag } from 'react-dnd';\r\nimport { Counter, CurrencyIcon } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useSelector } from '../../services/hooks';\r\nimport { getIngredientCount } from '../../utils/ingredients';\r\nimport { TIngredient, TIngredientDragItem, TLocationState } from '../../services/types';\r\nimport styles from './ingredient-card.module.css';\r\n\r\ntype TIngredientCardProps = {\r\n    ingredient: TIngredient;\r\n};\r\n\r\nconst IngredientCard: React.FC<TIngredientCardProps> = ({ ingredient }) => {\r\n    const count = useSelector((state) => getIngredientCount(\r\n        ingredient.id, state.burgerConstructor.ingredients,\r\n    ));\r\n    const location = useLocation();\r\n    const history = useHistory<TLocationState>();\r\n\r\n    const [, dragRef] = useDrag<TIngredientDragItem, unknown, unknown>({\r\n        type: 'ingredient',\r\n        item: { ingredient },\r\n    });\r\n\r\n    const handleShowDetails = () => {\r\n        history.push({\r\n            pathname: generatePath('/ingredients/:id', { id: ingredient.id }),\r\n            state: { background: location },\r\n        });\r\n    };\r\n\r\n    const { image, name, price } = ingredient;\r\n    return (\r\n        <div\r\n            className={styles.main}\r\n            onClick={handleShowDetails}\r\n            ref={dragRef}\r\n            data-type=\"ingredient-card\"\r\n        >\r\n            {count > 0 && (\r\n                <div data-type=\"ingredient-counter\">\r\n                    <Counter count={count} size=\"default\" />\r\n                </div>\r\n            )}\r\n            <img className=\"ml-4 mr-4\" src={image} alt={name} />\r\n            <div className={`mt-1 mb-1 ${styles.price}`}>\r\n                <p className=\"text text_type_digits-default mr-2\" data-type=\"ingredient-price\">{price}</p>\r\n                <CurrencyIcon type=\"primary\" />\r\n            </div>\r\n            <p className={`text text_type_main-default ${styles.name}`} data-type=\"ingredient-name\">{name}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IngredientCard;\r\n","import React from 'react';\r\nimport IngredientCard from '../ingredient-card/ingredient-card';\r\nimport { TIngredients } from '../../services/types';\r\nimport styles from './ingredient-cards.module.css';\r\n\r\ntype TIngredientCardsProps = {\r\n    title: string;\r\n    ingredients: TIngredients;\r\n};\r\n\r\nconst IngredientCards = React.forwardRef<HTMLDivElement, TIngredientCardsProps>((\r\n    { title, ingredients, ...props },\r\n    ref,\r\n) => (\r\n    // eslint-disable-next-line react/jsx-props-no-spreading\r\n    <div ref={ref} {...props}>\r\n        <p className=\"text text_type_main-medium\">{title}</p>\r\n        <div className={`${styles.cards} pt-6 pb-10 pl-4`}>\r\n            {ingredients.map((ingredient) => (\r\n                <IngredientCard\r\n                    key={ingredient.id}\r\n                    ingredient={ingredient}\r\n                />\r\n            ))}\r\n        </div>\r\n    </div>\r\n));\r\n\r\nexport default IngredientCards;\r\n","import React from 'react';\r\nimport { Tab } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { IngredientType } from '../../services/types';\r\nimport styles from './ingredient-tabs.module.css';\r\n\r\ntype TIngredientTabsProps = {\r\n    value: IngredientType;\r\n    onChange: (value: IngredientType) => void;\r\n};\r\n\r\nconst IngredientTabs: React.FC<TIngredientTabsProps> = ({ value, onChange }) => {\r\n    const handleOnClick = (tab: string) => onChange(tab as IngredientType);\r\n    return (\r\n        <div className={styles.main}>\r\n            <Tab\r\n                value={IngredientType.Bun}\r\n                active={value === IngredientType.Bun}\r\n                onClick={handleOnClick}\r\n            >\r\n                Булки\r\n            </Tab>\r\n            <Tab\r\n                value={IngredientType.Sauce}\r\n                active={value === IngredientType.Sauce}\r\n                onClick={handleOnClick}\r\n            >\r\n                Соусы\r\n            </Tab>\r\n            <Tab\r\n                value={IngredientType.Main}\r\n                active={value === IngredientType.Main}\r\n                onClick={handleOnClick}\r\n            >\r\n                Начинка\r\n            </Tab>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IngredientTabs;\r\n","import React from 'react';\r\nimport { useSelector } from '../../services/hooks';\r\nimport IngredientCards from '../ingredient-cards/ingredient-cards';\r\nimport IngredientTabs from '../ingredient-tabs/ingredient-tabs';\r\nimport { isBun, isSauce, isMain } from '../../utils/ingredients';\r\nimport { IngredientType, TIngredient } from '../../services/types';\r\nimport styles from './burger-ingredients.module.css';\r\n\r\nconst BurgerIngredients = () => {\r\n    const [currentTab, setCurrentTab] = React.useState<IngredientType>(IngredientType.Bun);\r\n    const { ingredients } = useSelector((state) => state.ingredientsList);\r\n    const categories = {\r\n        bun: React.useRef<HTMLDivElement>(null!),\r\n        sauce: React.useRef<HTMLDivElement>(null!),\r\n        main: React.useRef<HTMLDivElement>(null!),\r\n    };\r\n\r\n    const handleTabChange = (value: IngredientType): void => {\r\n        categories[value].current.scrollIntoView({ behavior: 'smooth' });\r\n        setCurrentTab(value);\r\n    };\r\n    const handleScroll: React.UIEventHandler<HTMLDivElement> = (e) => {\r\n        const { scrollTop } = e.target as HTMLElement;\r\n        const bunOffset = scrollTop;\r\n        const sauceOffset = Math.abs(\r\n            categories.sauce.current.offsetTop - categories.bun.current.offsetTop - scrollTop,\r\n        );\r\n        const mainOffset = Math.abs(\r\n            categories.main.current.offsetTop - categories.bun.current.offsetTop - scrollTop,\r\n        );\r\n        const minOffset = Math.min(bunOffset, sauceOffset, mainOffset);\r\n        if (minOffset === bunOffset && currentTab !== IngredientType.Bun) {\r\n            setCurrentTab(IngredientType.Bun);\r\n        } else if (minOffset === sauceOffset && currentTab !== IngredientType.Sauce) {\r\n            setCurrentTab(IngredientType.Sauce);\r\n        } else if (minOffset === mainOffset && currentTab !== IngredientType.Main) {\r\n            setCurrentTab(IngredientType.Main);\r\n        }\r\n    };\r\n\r\n    const buns = React.useMemo(\r\n        () => ingredients.filter((ingredient: TIngredient) => isBun(ingredient)),\r\n        [ingredients],\r\n    );\r\n    const sauces = React.useMemo(\r\n        () => ingredients.filter((ingredient: TIngredient) => isSauce(ingredient)),\r\n        [ingredients],\r\n    );\r\n    const mains = React.useMemo(\r\n        () => ingredients.filter((ingredient: TIngredient) => isMain(ingredient)),\r\n        [ingredients],\r\n    );\r\n\r\n    return (\r\n        <section className={styles.main}>\r\n            <p className=\"text text_type_main-large mt-10 mb-5\">Соберите бургер</p>\r\n            <IngredientTabs value={currentTab} onChange={handleTabChange} />\r\n            <div className={`${styles.cards} mt-10 custom-scroll`} onScroll={handleScroll}>\r\n                <IngredientCards\r\n                    title=\"Булки\"\r\n                    ingredients={buns}\r\n                    ref={categories.bun}\r\n                    data-testid=\"bun-cards\"\r\n                />\r\n                <IngredientCards\r\n                    title=\"Соусы\"\r\n                    ingredients={sauces}\r\n                    ref={categories.sauce}\r\n                    data-testid=\"sauce-cards\"\r\n                />\r\n                <IngredientCards\r\n                    title=\"Начинка\"\r\n                    ingredients={mains}\r\n                    ref={categories.main}\r\n                    data-testid=\"main-cards\"\r\n                />\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default BurgerIngredients;\r\n","import React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport BurgerConstructor from '../../components/burger-constructor/burger-constructor';\r\nimport BurgerIngredients from '../../components/burger-ingredients/burger-ingredients';\r\nimport styles from './constructor-page.module.css';\r\n\r\nconst ConstructorPage = () => (\r\n    <div className={styles.main}>\r\n        <DndProvider backend={HTML5Backend}>\r\n            <BurgerIngredients />\r\n            <BurgerConstructor />\r\n        </DndProvider>\r\n    </div>\r\n);\r\n\r\nexport default ConstructorPage;\r\n","import React from 'react';\r\nimport styles from './dialog-page.module.css';\r\n\r\nconst DialogPage: React.FC = ({ children }) => (\r\n    <div className={styles.main}>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default DialogPage;\r\n","import React from 'react';\r\nimport { TIngredient } from '../../services/types';\r\nimport styles from './ingredient-details.module.css';\r\n\r\ntype TIngredientDetailsProps = {\r\n    ingredient: TIngredient;\r\n};\r\n\r\nconst IngredientDetails: React.FC<TIngredientDetailsProps> = ({ ingredient }) => {\r\n    const { calories, carbohydrates, fat, imageLarge, name, proteins } = ingredient;\r\n    return (\r\n        <>\r\n            <img src={imageLarge} alt={name} />\r\n            <p className=\"text text_type_main-medium mt-4 mb-8\" data-type=\"ingredient-name\">{name}</p>\r\n            <div className={styles.details}>\r\n                <div className={styles.detail}>\r\n                    <p className=\"text text_type_main-default text_color_inactive\">Калории, ккал</p>\r\n                    <p className=\"text text_type_digits-default text_color_inactive\">{calories}</p>\r\n                </div>\r\n                <div className={styles.detail}>\r\n                    <p className=\"text text_type_main-default text_color_inactive\">Белки, г</p>\r\n                    <p className=\"text text_type_digits-default text_color_inactive\">{proteins}</p>\r\n                </div>\r\n                <div className={styles.detail}>\r\n                    <p className=\"text text_type_main-default text_color_inactive\">Жиры, г</p>\r\n                    <p className=\"text text_type_digits-default text_color_inactive\">{fat}</p>\r\n                </div>\r\n                <div className={styles.detail}>\r\n                    <p className=\"text text_type_main-default text_color_inactive\">Углеводы, г</p>\r\n                    <p className=\"text text_type_digits-default text_color_inactive\">{carbohydrates}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IngredientDetails;\r\n","import React from 'react';\r\nimport { InfoIcon } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport styles from './error-message.module.css';\r\n\r\ntype TErrorMessageProps = {\r\n    message: string;\r\n};\r\n\r\nconst ErrorMessage: React.FC<TErrorMessageProps> = ({ message }) => (\r\n    <div className={styles.main}>\r\n        <InfoIcon type=\"error\" />\r\n        <p className=\"text text_type_main-default text_color_error ml-2\">{message}</p>\r\n    </div>\r\n);\r\n\r\nexport default ErrorMessage;\r\n","export const SHOW_INGREDIENT_DETAILS: 'SHOW_INGREDIENT_DETAILS' = 'SHOW_INGREDIENT_DETAILS';\r\nexport const HIDE_INGREDIENT_DETAILS: 'HIDE_INGREDIENT_DETAILS' = 'HIDE_INGREDIENT_DETAILS';\r\n","import {\r\n    SHOW_INGREDIENT_DETAILS,\r\n    HIDE_INGREDIENT_DETAILS,\r\n} from '../constants/ingredient-details';\r\nimport { TIngredient } from '../types';\r\nimport {\r\n    IHideIngredientDetailsAction,\r\n    IShowIngredientDetailsAction,\r\n} from '../types/actions/ingredient-details';\r\n\r\nexport const showIngredientDetails = (ingredient: TIngredient): IShowIngredientDetailsAction => ({\r\n    type: SHOW_INGREDIENT_DETAILS,\r\n    ingredient,\r\n});\r\n\r\nexport const hideIngredientDetails = (): IHideIngredientDetailsAction => ({\r\n    type: HIDE_INGREDIENT_DETAILS,\r\n});\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport IngredientDetails from '../../components/ingredient-details/ingredient-details';\r\nimport DialogPage from '../../components/dialog-page/dialog-page';\r\nimport ErrorMessage from '../../components/error-message/error-message';\r\nimport { getIngredient } from '../../utils/ingredients';\r\nimport { hideIngredientDetails, showIngredientDetails } from '../../services/actions/ingredient-details';\r\n\r\ntype TIngredientDetailsPageParams = {\r\n    id: string;\r\n};\r\n\r\nconst IngredientDetailsPage = () => {\r\n    const { id } = useParams<TIngredientDetailsPageParams>();\r\n    const { ingredients } = useSelector((state) => state.ingredientsList);\r\n    const dispatch = useDispatch();\r\n\r\n    const ingredient = React.useMemo(\r\n        () => getIngredient(id, ingredients),\r\n        [id, ingredients],\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        if (ingredient) {\r\n            dispatch(showIngredientDetails(ingredient));\r\n        }\r\n        return () => { dispatch(hideIngredientDetails()); };\r\n    }, [ingredient, dispatch]);\r\n\r\n    if (!ingredient) {\r\n        return (\r\n            <DialogPage>\r\n                <ErrorMessage message={`Ingredient #${id} is not found`} />\r\n            </DialogPage>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <DialogPage>\r\n            <p className=\"text text_type_main-large\">Детали ингредиента</p>\r\n            <IngredientDetails ingredient={ingredient} />\r\n        </DialogPage>\r\n    );\r\n};\r\n\r\nexport default IngredientDetailsPage;\r\n","import React from 'react';\r\nimport styles from './form.module.css';\r\n\r\ntype TFormProps = {\r\n    onSubmit: React.FormEventHandler<HTMLFormElement>;\r\n};\r\n\r\nconst Form: React.FC<TFormProps> = ({ children, onSubmit }) => (\r\n    <form\r\n        className={styles.main}\r\n        onSubmit={onSubmit}\r\n    >\r\n        {children}\r\n    </form>\r\n);\r\n\r\nexport default Form;\r\n","export const REGISTER_USER_REQUEST: 'REGISTER_USER_REQUEST' = 'REGISTER_USER_REQUEST';\r\nexport const REGISTER_USER_SUCCESS: 'REGISTER_USER_SUCCESS' = 'REGISTER_USER_SUCCESS';\r\nexport const REGISTER_USER_ERROR: 'REGISTER_USER_ERROR' = 'REGISTER_USER_ERROR';\r\nexport const LOGIN_USER_REQUEST: 'LOGIN_USER_REQUEST' = 'LOGIN_USER_REQUEST';\r\nexport const LOGIN_USER_SUCCESS: 'LOGIN_USER_SUCCESS' = 'LOGIN_USER_SUCCESS';\r\nexport const LOGIN_USER_ERROR: 'LOGIN_USER_ERROR' = 'LOGIN_USER_ERROR';\r\nexport const LOGOUT_USER_REQUEST: 'LOGOUT_USER_REQUEST' = 'LOGOUT_USER_REQUEST';\r\nexport const LOGOUT_USER_SUCCESS: 'LOGOUT_USER_SUCCESS' = 'LOGOUT_USER_SUCCESS';\r\nexport const LOGOUT_USER_ERROR: 'LOGOUT_USER_ERROR' = 'LOGOUT_USER_ERROR';\r\nexport const GET_USER_REQUEST: 'GET_USER_REQUEST' = 'GET_USER_REQUEST';\r\nexport const GET_USER_SUCCESS: 'GET_USER_SUCCESS' = 'GET_USER_SUCCESS';\r\nexport const GET_USER_ERROR: 'GET_USER_ERROR' = 'GET_USER_ERROR';\r\nexport const UPDATE_USER_REQUEST: 'UPDATE_USER_REQUEST' = 'UPDATE_USER_REQUEST';\r\nexport const UPDATE_USER_SUCCESS: 'UPDATE_USER_SUCCESS' = 'UPDATE_USER_SUCCESS';\r\nexport const UPDATE_USER_ERROR: 'UPDATE_USER_ERROR' = 'UPDATE_USER_ERROR';\r\n","import {\r\n    REGISTER_USER_REQUEST,\r\n    REGISTER_USER_SUCCESS,\r\n    REGISTER_USER_ERROR,\r\n    LOGIN_USER_REQUEST,\r\n    LOGIN_USER_SUCCESS,\r\n    LOGIN_USER_ERROR,\r\n    LOGOUT_USER_REQUEST,\r\n    LOGOUT_USER_SUCCESS,\r\n    LOGOUT_USER_ERROR,\r\n    GET_USER_REQUEST,\r\n    GET_USER_SUCCESS,\r\n    GET_USER_ERROR,\r\n    UPDATE_USER_REQUEST,\r\n    UPDATE_USER_SUCCESS,\r\n    UPDATE_USER_ERROR,\r\n} from '../constants/auth';\r\nimport { TApiUser, TApiUserCredentials } from '../types/api';\r\nimport { TDispatch, TGetState, TThunk } from '../types/store';\r\nimport ApiClient from '../api-client';\r\nimport { getErrorMessage } from '../../utils/error';\r\n\r\nexport const registerUser: TThunk = (user: TApiUser) => async (\r\n    dispatch: TDispatch,\r\n    getState: TGetState,\r\n    apiClient: ApiClient,\r\n) => {\r\n    dispatch({\r\n        type: REGISTER_USER_REQUEST,\r\n    });\r\n    try {\r\n        const result = await apiClient.registerUser(user);\r\n        dispatch({\r\n            type: REGISTER_USER_SUCCESS,\r\n            user: result,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: REGISTER_USER_ERROR,\r\n            message: getErrorMessage(error),\r\n        });\r\n    }\r\n};\r\n\r\nexport const logInUser: TThunk = (user: TApiUserCredentials) => async (\r\n    dispatch: TDispatch,\r\n    getState: TGetState,\r\n    apiClient: ApiClient,\r\n) => {\r\n    dispatch({\r\n        type: LOGIN_USER_REQUEST,\r\n    });\r\n    try {\r\n        const result = await apiClient.logInUser(user);\r\n        dispatch({\r\n            type: LOGIN_USER_SUCCESS,\r\n            user: result,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: LOGIN_USER_ERROR,\r\n            message: getErrorMessage(error),\r\n        });\r\n    }\r\n};\r\n\r\nexport const logOutUser: TThunk = () => async (\r\n    dispatch: TDispatch,\r\n    getState: TGetState,\r\n    apiClient: ApiClient,\r\n) => {\r\n    dispatch({\r\n        type: LOGOUT_USER_REQUEST,\r\n    });\r\n    try {\r\n        await apiClient.logOutUser();\r\n        dispatch({\r\n            type: LOGOUT_USER_SUCCESS,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: LOGOUT_USER_ERROR,\r\n            message: getErrorMessage(error),\r\n        });\r\n    }\r\n};\r\n\r\nexport const getUser = () => async (\r\n    dispatch: TDispatch,\r\n    getState: TGetState,\r\n    apiClient: ApiClient,\r\n) => {\r\n    dispatch({\r\n        type: GET_USER_REQUEST,\r\n    });\r\n    try {\r\n        const user = await apiClient.getUser();\r\n        dispatch({\r\n            type: GET_USER_SUCCESS,\r\n            user,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GET_USER_ERROR,\r\n            message: getErrorMessage(error),\r\n        });\r\n    }\r\n};\r\n\r\nexport const updateUser = (user: TApiUser) => async (\r\n    dispatch: TDispatch,\r\n    getState: TGetState,\r\n    apiClient: ApiClient,\r\n) => {\r\n    dispatch({\r\n        type: UPDATE_USER_REQUEST,\r\n    });\r\n    try {\r\n        const result = await apiClient.updateUser(user);\r\n        dispatch({\r\n            type: UPDATE_USER_SUCCESS,\r\n            user: result,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: UPDATE_USER_ERROR,\r\n            message: getErrorMessage(error),\r\n        });\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { Link, Redirect, useLocation } from 'react-router-dom';\r\nimport { Button, Input, PasswordInput } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport DialogPage from '../../components/dialog-page/dialog-page';\r\nimport Form from '../../components/form/form';\r\nimport ErrorMessage from '../../components/error-message/error-message';\r\nimport { logInUser } from '../../services/actions/auth';\r\nimport ApiClient from '../../services/api-client';\r\nimport { TLocationState } from '../../services/types';\r\nimport styles from './login-page.module.css';\r\n\r\nconst LoginPage = () => {\r\n    const [email, setEmail] = React.useState<string>('');\r\n    const [password, setPassword] = React.useState<string>('');\r\n    const location = useLocation<TLocationState>();\r\n    const { auth } = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n\r\n    const updateEmail: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setEmail(e.target.value);\r\n    };\r\n    const updatePassword: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setPassword(e.target.value);\r\n    };\r\n    const logIn: React.FormEventHandler<HTMLFormElement> = (e) => {\r\n        e.preventDefault();\r\n        if (auth.isLoggingIn) {\r\n            // avoid redundant requests over double mouse clicks\r\n            return;\r\n        }\r\n        dispatch(logInUser({ email, password }));\r\n    };\r\n\r\n    if (auth.user || (ApiClient.isAuthenticated() && !auth.loadError)) {\r\n        return <Redirect to={location.state?.from || '/'} />;\r\n    }\r\n\r\n    return (\r\n        <DialogPage>\r\n            <Form onSubmit={logIn}>\r\n                <p className=\"text text_type_main-medium\">\r\n                    Вход\r\n                </p>\r\n                {auth.loginError && (\r\n                    <ErrorMessage message={auth.loginError} />\r\n                )}\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    placeholder=\"E-mail\"\r\n                    value={email}\r\n                    onChange={updateEmail}\r\n                />\r\n                <PasswordInput\r\n                    name=\"password\"\r\n                    value={password}\r\n                    onChange={updatePassword}\r\n                />\r\n                <Button type=\"primary\" size=\"medium\">\r\n                    Войти\r\n                </Button>\r\n            </Form>\r\n            <div className={styles.links}>\r\n                <div>\r\n                    <span className=\"text text_type_main-default text_color_inactive\">\r\n                        Вы - новый пользователь?&nbsp;\r\n                    </span>\r\n                    <Link to=\"/register\" className=\"text text_type_main-default text_color_accent\">\r\n                        Зарегистрироваться\r\n                    </Link>\r\n                </div>\r\n                <div>\r\n                    <span className=\"text text_type_main-default text_color_inactive\">\r\n                        Забыли пароль?&nbsp;\r\n                    </span>\r\n                    <Link to=\"/forgot-password\" className=\"text text_type_main-default text_color_accent\">\r\n                        Восстановить пароль\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </DialogPage>\r\n    );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport DialogPage from '../../components/dialog-page/dialog-page';\r\nimport ErrorMessage from '../../components/error-message/error-message';\r\nimport { logOutUser } from '../../services/actions/auth';\r\n\r\nconst LogoutPage = () => {\r\n    const { auth } = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(\r\n        () => { dispatch(logOutUser()); },\r\n        [dispatch],\r\n    );\r\n\r\n    if (auth.logoutError) {\r\n        return (\r\n            <DialogPage>\r\n                <ErrorMessage message={auth.logoutError} />\r\n            </DialogPage>\r\n        );\r\n    }\r\n    if (auth.user) {\r\n        return (\r\n            <DialogPage>\r\n                <p className=\"text text_type_main-medium\">\r\n                    Выход...\r\n                </p>\r\n            </DialogPage>\r\n        );\r\n    }\r\n\r\n    return <Redirect to=\"/login\" />;\r\n};\r\n\r\nexport default LogoutPage;\r\n","export const SEND_RESET_USER_PASSWORD_EMAIL_REQUEST: 'SEND_RESET_USER_PASSWORD_EMAIL_REQUEST' = 'SEND_RESET_USER_PASSWORD_EMAIL_REQUEST';\r\nexport const SEND_RESET_USER_PASSWORD_EMAIL_SUCCESS: 'SEND_RESET_USER_PASSWORD_EMAIL_SUCCESS' = 'SEND_RESET_USER_PASSWORD_EMAIL_SUCCESS';\r\nexport const SEND_RESET_USER_PASSWORD_EMAIL_ERROR: 'SEND_RESET_USER_PASSWORD_EMAIL_ERROR' = 'SEND_RESET_USER_PASSWORD_EMAIL_ERROR';\r\nexport const RESET_EMAIL_SENT: 'RESET_EMAIL_SENT' = 'RESET_EMAIL_SENT';\r\nexport const RESET_USER_PASSWORD_REQUEST: 'RESET_USER_PASSWORD_REQUEST' = 'RESET_USER_PASSWORD_REQUEST';\r\nexport const RESET_USER_PASSWORD_SUCCESS: 'RESET_USER_PASSWORD_SUCCESS' = 'RESET_USER_PASSWORD_SUCCESS';\r\nexport const RESET_USER_PASSWORD_ERROR: 'RESET_USER_PASSWORD_ERROR' = 'RESET_USER_PASSWORD_ERROR';\r\nexport const RESET_PASSWORD_RESET: 'RESET_PASSWORD_RESET' = 'RESET_PASSWORD_RESET';\r\n","import React from 'react';\r\nimport { Link, Redirect, useLocation } from 'react-router-dom';\r\nimport { Button, Input } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport DialogPage from '../../components/dialog-page/dialog-page';\r\nimport Form from '../../components/form/form';\r\nimport ErrorMessage from '../../components/error-message/error-message';\r\nimport { resetEmailSent, sendResetUserPasswordEmail } from '../../services/actions/reset-password';\r\nimport ApiClient from '../../services/api-client';\r\nimport loginStyles from '../login-page/login-page.module.css';\r\n\r\nconst ForgotPasswordPage = () => {\r\n    const [email, setEmail] = React.useState<string>('');\r\n    const { auth } = useSelector((state) => state);\r\n    const { resetPassword } = useSelector((state) => state);\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => () => {\r\n        dispatch(resetEmailSent());\r\n    }, [dispatch]);\r\n\r\n    const updateEmail: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setEmail(e.target.value);\r\n    };\r\n    const restore: React.FormEventHandler<HTMLFormElement> = (e) => {\r\n        e.preventDefault();\r\n        if (resetPassword.isSendingEmail) {\r\n            // avoid redundant requests over double mouse clicks\r\n            return;\r\n        }\r\n        dispatch(sendResetUserPasswordEmail(email));\r\n    };\r\n\r\n    if (auth.user || ApiClient.isAuthenticated()) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n    if (resetPassword.isEmailSent) {\r\n        return (\r\n            <Redirect\r\n                to={{\r\n                    pathname: '/reset-password',\r\n                    state: { from: location },\r\n                }}\r\n                push\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <DialogPage>\r\n            <Form onSubmit={restore}>\r\n                <p className=\"text text_type_main-medium\">\r\n                    Восстановление пароля\r\n                </p>\r\n                {resetPassword.sendingEmailError && (\r\n                    <ErrorMessage message={resetPassword.sendingEmailError} />\r\n                )}\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    placeholder=\"Укажите E-mail\"\r\n                    value={email}\r\n                    onChange={updateEmail}\r\n                />\r\n                <Button type=\"primary\" size=\"medium\">\r\n                    Восстановить\r\n                </Button>\r\n            </Form>\r\n            <div className={loginStyles.links}>\r\n                <div>\r\n                    <span className=\"text text_type_main-default text_color_inactive\">\r\n                        Вспомнили пароль?&nbsp;\r\n                    </span>\r\n                    <Link to=\"/login\" className=\"text text_type_main-default text_color_accent\">\r\n                        Войти\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </DialogPage>\r\n    );\r\n};\r\n\r\nexport default ForgotPasswordPage;\r\n","import {\r\n    SEND_RESET_USER_PASSWORD_EMAIL_REQUEST,\r\n    SEND_RESET_USER_PASSWORD_EMAIL_SUCCESS,\r\n    SEND_RESET_USER_PASSWORD_EMAIL_ERROR,\r\n    RESET_EMAIL_SENT,\r\n    RESET_USER_PASSWORD_REQUEST,\r\n    RESET_USER_PASSWORD_SUCCESS,\r\n    RESET_USER_PASSWORD_ERROR,\r\n    RESET_PASSWORD_RESET,\r\n} from '../constants/reset-password';\r\nimport { TDispatch, TGetState, TThunk } from '../types/store';\r\nimport { TApiUserResetPasswordInfo } from '../types/api';\r\nimport { IResetEmailSentAction, IResetPasswordResetAction } from '../types/actions/reset-password';\r\nimport ApiClient from '../api-client';\r\nimport { getErrorMessage } from '../../utils/error';\r\n\r\nexport const sendResetUserPasswordEmail: TThunk = (email: string) => async (\r\n    dispatch: TDispatch,\r\n    getState: TGetState,\r\n    apiClient: ApiClient,\r\n) => {\r\n    dispatch({\r\n        type: SEND_RESET_USER_PASSWORD_EMAIL_REQUEST,\r\n    });\r\n    try {\r\n        await apiClient.sendResetUserPasswordEmail(email);\r\n        dispatch({\r\n            type: SEND_RESET_USER_PASSWORD_EMAIL_SUCCESS,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: SEND_RESET_USER_PASSWORD_EMAIL_ERROR,\r\n            message: getErrorMessage(error),\r\n        });\r\n    }\r\n};\r\n\r\nexport const resetEmailSent = (): IResetEmailSentAction => ({\r\n    type: RESET_EMAIL_SENT,\r\n});\r\n\r\nexport const resetUserPassword: TThunk = ({ password, token }: TApiUserResetPasswordInfo) => async (\r\n    dispatch: TDispatch,\r\n    getState: TGetState,\r\n    apiClient: ApiClient,\r\n) => {\r\n    dispatch({\r\n        type: RESET_USER_PASSWORD_REQUEST,\r\n    });\r\n    try {\r\n        await apiClient.resetUserPassword({ password, token });\r\n        dispatch({\r\n            type: RESET_USER_PASSWORD_SUCCESS,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: RESET_USER_PASSWORD_ERROR,\r\n            message: getErrorMessage(error),\r\n        });\r\n    }\r\n};\r\n\r\nexport const resetPasswordReset = (): IResetPasswordResetAction => ({\r\n    type: RESET_PASSWORD_RESET,\r\n});\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './profile-menu.module.css';\r\n\r\nconst ProfileMenu = () => {\r\n    const getNavLinkClassName = (isActive: boolean) => (isActive\r\n        ? `text text_type_main-medium text_color_primary ${styles.menuItem}`\r\n        : `text text_type_main-medium text_color_inactive  ${styles.menuItem}`\r\n    );\r\n    return (\r\n        <div className={styles.main}>\r\n            <NavLink\r\n                to=\"/profile\"\r\n                exact\r\n                className={getNavLinkClassName}\r\n            >\r\n                Профиль\r\n            </NavLink>\r\n            <NavLink\r\n                to=\"/profile/orders\"\r\n                exact\r\n                className={getNavLinkClassName}\r\n            >\r\n                История заказов\r\n            </NavLink>\r\n            <NavLink\r\n                to=\"/logout\"\r\n                exact\r\n                className={getNavLinkClassName}\r\n            >\r\n                Выход\r\n            </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileMenu;\r\n","// eslint-disable-next-line import/prefer-default-export\r\nexport const ucFirst = (str: string): string => (\r\n    str.charAt(0).toUpperCase() + str.slice(1)\r\n);\r\n","import { TOrder, TOrders } from '../services/types';\r\nimport { TApiOrder, TApiOrderStatus } from '../services/types/api';\r\nimport { ucFirst } from './string';\r\n\r\nexport const mapOrder = (order: TApiOrder): TOrder => ({\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    id: order._id,\r\n    number: order.number,\r\n    name: order.name,\r\n    status: order.status,\r\n    createdAt: new Date(order.createdAt),\r\n    updatedAt: new Date(order.updatedAt),\r\n    ingredients: order.ingredients,\r\n});\r\n\r\nexport const mapOrders = (orders: Array<TApiOrder>): TOrders => orders.map(mapOrder);\r\n\r\nexport const localizeDate = (date: Date) => {\r\n    const diff = (new Date()).getTime() - date.getTime();\r\n    const rtf = new Intl.RelativeTimeFormat('ru', { numeric: 'auto' });\r\n    const days = ucFirst(rtf.format(-Math.floor(diff / (1000 * 60 * 60 * 24)), 'day'));\r\n    const dtf = new Intl.DateTimeFormat('ru', { hour: 'numeric', minute: 'numeric', timeZoneName: 'short' });\r\n    const time = dtf.format(date);\r\n    return `${days}, ${time}`;\r\n};\r\n\r\nexport const localizeStatus = (status: TApiOrderStatus): string => {\r\n    if (TApiOrderStatus.Created === status) {\r\n        return 'Создан';\r\n    }\r\n    if (TApiOrderStatus.Pending === status) {\r\n        return 'Готовится';\r\n    }\r\n    return 'Выполнен';\r\n};\r\n","import React from 'react';\r\nimport { generatePath, useHistory, useLocation } from 'react-router-dom';\r\nimport { CurrencyIcon } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { TLocationState, TOrder } from '../../services/types';\r\nimport { TApiOrderStatus } from '../../services/types/api';\r\nimport { useSelector } from '../../services/hooks';\r\nimport {\r\n    getIngredients,\r\n    getIngredientsPrice,\r\n} from '../../utils/ingredients';\r\nimport { localizeDate, localizeStatus } from '../../utils/orders';\r\nimport styles from './order-card.module.css';\r\n\r\ntype TOrderCardProps = {\r\n    order: TOrder;\r\n    showStatus: boolean;\r\n};\r\n\r\nconst OrderCard: React.FC<TOrderCardProps> = ({ order, showStatus }) => {\r\n    const { ingredients } = useSelector((state) => state.ingredientsList);\r\n    const location = useLocation();\r\n    const history = useHistory<TLocationState>();\r\n\r\n    const orderIngredients = React.useMemo(\r\n        () => getIngredients(order.ingredients, ingredients)\r\n            .map((ingredient) => ({ ...ingredient, uuid: uuid() })),\r\n        [order.ingredients, ingredients],\r\n    );\r\n    const orderPrice = React.useMemo(\r\n        () => getIngredientsPrice(orderIngredients),\r\n        [orderIngredients],\r\n    );\r\n\r\n    const maxIngredientsCount = 5;\r\n    const restIngredientsCount = orderIngredients.length - maxIngredientsCount;\r\n    const displayedIngredients = React.useMemo(\r\n        () => orderIngredients.slice(0, maxIngredientsCount + 1).reverse(),\r\n        [orderIngredients],\r\n    );\r\n\r\n    const handleShowInfo = () => {\r\n        history.push({\r\n            pathname: generatePath(`${location.pathname}/:id`, { id: order.number }),\r\n            state: { background: location },\r\n        });\r\n    };\r\n\r\n    const statusClass = TApiOrderStatus.Done === order.status\r\n        ? 'text text_type_main-default mt-2 text_color_success'\r\n        : 'text text_type_main-default mt-2';\r\n    return (\r\n        <div\r\n            className={styles.card}\r\n            onClick={handleShowInfo}\r\n        >\r\n            <div className={styles.header}>\r\n                <p className=\"text text_type_digits-default\">{`#${order.number}`}</p>\r\n                <p className=\"text text_type_main-default text_color_inactive\">{localizeDate(order.createdAt)}</p>\r\n            </div>\r\n            <div>\r\n                <p className=\"text text_type_main-medium\">{order.name}</p>\r\n                {showStatus && (\r\n                    <p className={statusClass}>{localizeStatus(order.status)}</p>\r\n                )}\r\n            </div>\r\n            <div className={styles.footer}>\r\n                <div className={styles.icons}>\r\n                    {displayedIngredients.map((ingredient, index) => (\r\n                        <div\r\n                            key={ingredient.uuid}\r\n                            className={styles.icon}\r\n                            style={{\r\n                                left: 48 * (displayedIngredients.length - index - 1),\r\n                            }}\r\n                        >\r\n                            <img\r\n                                src={ingredient.imageMobile}\r\n                                alt={ingredient.name}\r\n                                style={{\r\n                                    opacity: (index === 0 && restIngredientsCount > 0) ? 0.6 : 1,\r\n                                }}\r\n                            />\r\n                            {index === 0 && restIngredientsCount > 0 ? (\r\n                                <p className=\"text text_type_main-default\">{`+${restIngredientsCount}`}</p>\r\n                            ) : null}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className={styles.price}>\r\n                    <p className=\"text text_type_digits-default mr-2\">{orderPrice}</p>\r\n                    <CurrencyIcon type=\"primary\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderCard;\r\n","import React from 'react';\r\nimport { TOrders } from '../../services/types';\r\nimport OrderCard from '../order-card/order-card';\r\nimport styles from './order-cards.module.css';\r\n\r\ntype TOrderCardsProps = {\r\n    orders: TOrders;\r\n    showStatus?: boolean;\r\n};\r\n\r\nconst OrderCards: React.FC<TOrderCardsProps> = ({ orders, showStatus = false }) => (\r\n    <div className={`${styles.cards} custom-scroll`}>\r\n        {orders.map((order) => (\r\n            <OrderCard\r\n                key={order.number}\r\n                order={order}\r\n                showStatus={showStatus}\r\n            />\r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport default OrderCards;\r\n","export const USER_ORDERS_LIST_CONNECTION_OPEN: 'USER_ORDERS_LIST_CONNECTION_OPEN' = 'USER_ORDERS_LIST_CONNECTION_OPEN';\r\nexport const USER_ORDERS_LIST_CONNECTION_CLOSE: 'USER_ORDERS_LIST_CONNECTION_CLOSE' = 'USER_ORDERS_LIST_CONNECTION_CLOSE';\r\nexport const USER_ORDERS_LIST_CONNECTION_SUCCESS: 'USER_ORDERS_LIST_CONNECTION_SUCCESS' = 'USER_ORDERS_LIST_CONNECTION_SUCCESS';\r\nexport const USER_ORDERS_LIST_CONNECTION_ERROR: 'USER_ORDERS_LIST_CONNECTION_ERROR' = 'USER_ORDERS_LIST_CONNECTION_ERROR';\r\nexport const USER_ORDERS_LIST_CONNECTION_CLOSED: 'USER_ORDERS_LIST_CONNECTION_CLOSED' = 'USER_ORDERS_LIST_CONNECTION_CLOSED';\r\nexport const USER_ORDERS_LIST_RECEIVED: 'USER_ORDERS_LIST_RECEIVED' = 'USER_ORDERS_LIST_RECEIVED';\r\n","import React from 'react';\r\nimport ProfileMenu from '../../components/profile-menu/profile-menu';\r\nimport OrderCards from '../../components/order-cards/order-cards';\r\nimport ErrorMessage from '../../components/error-message/error-message';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport { closeUserOrdersListConnection, openUserOrdersListConnection } from '../../services/actions/user-orders-list';\r\nimport styles from './profile-orders-page.module.css';\r\n\r\nconst ProfileOrdersPage = () => {\r\n    const { connectionError, orders } = useSelector((state) => state.userOrdersList);\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        dispatch(openUserOrdersListConnection());\r\n        return () => { dispatch(closeUserOrdersListConnection()); };\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.container}>\r\n                <div className={styles.menu}>\r\n                    <ProfileMenu />\r\n\r\n                    <p className=\"text text_type_main-default text_color_inactive mt-20\">\r\n                        В этом разделе вы можете просмотреть свою историю заказов\r\n                    </p>\r\n                </div>\r\n                <div className={styles.orders}>\r\n                    {connectionError ? (\r\n                        <ErrorMessage message={connectionError} />\r\n                    ) : (\r\n                        <OrderCards orders={orders} showStatus />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileOrdersPage;\r\n","import {\r\n    USER_ORDERS_LIST_CONNECTION_OPEN,\r\n    USER_ORDERS_LIST_CONNECTION_CLOSE,\r\n} from '../constants/user-orders-list';\r\nimport {\r\n    IUserOrdersListConnectionCloseAction,\r\n    IUserOrdersListConnectionOpenAction,\r\n} from '../types/actions/user-orders-list';\r\n\r\nexport const openUserOrdersListConnection = (): IUserOrdersListConnectionOpenAction => ({\r\n    type: USER_ORDERS_LIST_CONNECTION_OPEN,\r\n});\r\n\r\nexport const closeUserOrdersListConnection = (): IUserOrdersListConnectionCloseAction => ({\r\n    type: USER_ORDERS_LIST_CONNECTION_CLOSE,\r\n});\r\n","import React from 'react';\r\nimport { Button, Input, PasswordInput } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport Form from '../form/form';\r\nimport ErrorMessage from '../error-message/error-message';\r\nimport { getUser, updateUser } from '../../services/actions/auth';\r\nimport styles from './profile-form.module.css';\r\n\r\nconst ProfileForm = () => {\r\n    const [name, setName] = React.useState<string>('');\r\n    const [email, setEmail] = React.useState<string>('');\r\n    const [password, setPassword] = React.useState<string>('');\r\n    const { auth } = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        if (auth.user) {\r\n            setName(auth.user.name);\r\n            setEmail(auth.user.email);\r\n        } else {\r\n            dispatch(getUser());\r\n        }\r\n    }, [auth.user, dispatch]);\r\n\r\n    const updateName: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n    const updateEmail: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setEmail(e.target.value);\r\n    };\r\n    const updatePassword: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setPassword(e.target.value);\r\n    };\r\n    const update: React.FormEventHandler<HTMLFormElement> = (e) => {\r\n        e.preventDefault();\r\n        const user = { name, email, password };\r\n        dispatch(updateUser(user));\r\n        setPassword('');\r\n    };\r\n    const reset = (e: React.SyntheticEvent): void => {\r\n        e.preventDefault();\r\n        if (auth.user) {\r\n            setName(auth.user.name);\r\n            setEmail(auth.user.email);\r\n        }\r\n        setPassword('');\r\n    };\r\n\r\n    const hasChanges = auth.user && (name !== auth.user.name || email !== auth.user.email || password !== '');\r\n    return (\r\n        <Form onSubmit={update}>\r\n            {auth.loadError && (\r\n                <ErrorMessage message={auth.loadError} />\r\n            )}\r\n            {auth.updateError && (\r\n                <ErrorMessage message={auth.updateError} />\r\n            )}\r\n            <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Имя\"\r\n                value={name}\r\n                icon=\"EditIcon\"\r\n                onChange={updateName}\r\n            />\r\n            <Input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"Логин\"\r\n                value={email}\r\n                icon=\"EditIcon\"\r\n                onChange={updateEmail}\r\n            />\r\n            <PasswordInput\r\n                name=\"password\"\r\n                value={password}\r\n                onChange={updatePassword}\r\n            />\r\n            {hasChanges && (\r\n                <div className={styles.buttons}>\r\n                    <Button type=\"secondary\" size=\"medium\" onClick={reset}>\r\n                        Отмена\r\n                    </Button>\r\n                    <Button type=\"primary\" size=\"medium\">\r\n                        Сохранить\r\n                    </Button>\r\n                </div>\r\n            )}\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default ProfileForm;\r\n","import React from 'react';\r\nimport ProfileMenu from '../../components/profile-menu/profile-menu';\r\nimport ProfileForm from '../../components/profile-form/profile-form';\r\nimport styles from './profile-page.module.css';\r\n\r\nconst ProfilePage = () => (\r\n    <div className={styles.main}>\r\n        <div className={styles.container}>\r\n            <div className={styles.menu}>\r\n                <ProfileMenu />\r\n\r\n                <p className=\"text text_type_main-default text_color_inactive mt-20\">\r\n                    В этом разделе вы можете изменить свои персональные данные\r\n                </p>\r\n            </div>\r\n            <div className={styles.form}>\r\n                <ProfileForm />\r\n            </div>\r\n            <div className={styles.space} />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default ProfilePage;\r\n","import React from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { Button, Input, PasswordInput } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport DialogPage from '../../components/dialog-page/dialog-page';\r\nimport Form from '../../components/form/form';\r\nimport ErrorMessage from '../../components/error-message/error-message';\r\nimport { registerUser } from '../../services/actions/auth';\r\nimport ApiClient from '../../services/api-client';\r\nimport loginStyles from '../login-page/login-page.module.css';\r\n\r\nconst RegisterPage = () => {\r\n    const [name, setName] = React.useState<string>('');\r\n    const [email, setEmail] = React.useState<string>('');\r\n    const [password, setPassword] = React.useState<string>('');\r\n    const { auth } = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n\r\n    const updateName: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n    const updateEmail: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setEmail(e.target.value);\r\n    };\r\n    const updatePassword: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setPassword(e.target.value);\r\n    };\r\n    const register: React.FormEventHandler<HTMLFormElement> = (e) => {\r\n        e.preventDefault();\r\n        if (auth.isRegistering) {\r\n            // avoid redundant requests over double mouse clicks\r\n            return;\r\n        }\r\n        dispatch(registerUser({ name, email, password }));\r\n    };\r\n\r\n    if (auth.user || ApiClient.isAuthenticated()) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <DialogPage>\r\n            <Form onSubmit={register}>\r\n                <p className=\"text text_type_main-medium\">\r\n                    Регистрация\r\n                </p>\r\n                {auth.registrationError && (\r\n                    <ErrorMessage message={auth.registrationError} />\r\n                )}\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Имя\"\r\n                    value={name}\r\n                    onChange={updateName}\r\n                />\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    placeholder=\"E-mail\"\r\n                    value={email}\r\n                    onChange={updateEmail}\r\n                />\r\n                <PasswordInput\r\n                    name=\"password\"\r\n                    value={password}\r\n                    onChange={updatePassword}\r\n                />\r\n                <Button type=\"primary\" size=\"medium\">\r\n                    Зарегистрироваться\r\n                </Button>\r\n            </Form>\r\n            <div className={loginStyles.links}>\r\n                <div>\r\n                    <span className=\"text text_type_main-default text_color_inactive\">\r\n                        Уже зарегистрированы?&nbsp;\r\n                    </span>\r\n                    <Link to=\"/login\" className=\"text text_type_main-default text_color_accent\">\r\n                        Войти\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </DialogPage>\r\n    );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React from 'react';\r\nimport { Link, Redirect, useLocation } from 'react-router-dom';\r\nimport { Button, Input, PasswordInput } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport DialogPage from '../../components/dialog-page/dialog-page';\r\nimport Form from '../../components/form/form';\r\nimport ErrorMessage from '../../components/error-message/error-message';\r\nimport { resetPasswordReset, resetUserPassword } from '../../services/actions/reset-password';\r\nimport ApiClient from '../../services/api-client';\r\nimport { TLocationState } from '../../services/types';\r\nimport loginStyles from '../login-page/login-page.module.css';\r\n\r\nconst ResetPasswordPage = () => {\r\n    const [password, setPassword] = React.useState<string>('');\r\n    const [token, setToken] = React.useState<string>('');\r\n    const { auth } = useSelector((state) => state);\r\n    const { resetPassword } = useSelector((state) => state);\r\n    const location = useLocation<TLocationState>();\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => () => {\r\n        dispatch(resetPasswordReset());\r\n    }, [resetPassword.isPasswordReset, dispatch]);\r\n\r\n    if (auth.user || ApiClient.isAuthenticated()) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n    if (!location.state || !location.state.from || location.state.from.pathname !== '/forgot-password') {\r\n        return <Redirect to=\"/forgot-password\" />;\r\n    }\r\n    if (resetPassword.isPasswordReset) {\r\n        return <Redirect to=\"/login\" push />;\r\n    }\r\n\r\n    const updatePassword: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setPassword(e.target.value);\r\n    };\r\n    const updateToken: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setToken(e.target.value);\r\n    };\r\n    const reset: React.FormEventHandler<HTMLFormElement> = (e) => {\r\n        e.preventDefault();\r\n        if (resetPassword.isResettingPassword) {\r\n            // avoid redundant requests over double mouse clicks\r\n            return;\r\n        }\r\n        dispatch(resetUserPassword({ password, token }));\r\n    };\r\n\r\n    return (\r\n        <DialogPage>\r\n            <Form onSubmit={reset}>\r\n                <p className=\"text text_type_main-medium\">\r\n                    Регистрация\r\n                </p>\r\n                {resetPassword.resetPasswordError && (\r\n                    <ErrorMessage message={resetPassword.resetPasswordError} />\r\n                )}\r\n                <PasswordInput\r\n                    name=\"password\"\r\n                    value={password}\r\n                    onChange={updatePassword}\r\n                />\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"token\"\r\n                    placeholder=\"Введите код из письма\"\r\n                    value={token}\r\n                    onChange={updateToken}\r\n                />\r\n                <Button type=\"primary\" size=\"medium\">\r\n                    Сохранить\r\n                </Button>\r\n            </Form>\r\n            <div className={loginStyles.links}>\r\n                <div>\r\n                    <span className=\"text text_type_main-default text_color_inactive\">\r\n                        Вспомнили пароль?&nbsp;\r\n                    </span>\r\n                    <Link to=\"/login\" className=\"text text_type_main-default text_color_accent\">\r\n                        Войти\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </DialogPage>\r\n    );\r\n};\r\n\r\nexport default ResetPasswordPage;\r\n","import React from 'react';\r\nimport { useSelector } from '../../services/hooks';\r\nimport { TApiOrderStatus } from '../../services/types/api';\r\nimport styles from './orders-status.module.css';\r\n\r\nconst OrdersStatus = () => {\r\n    const { orders, total, totalToday } = useSelector((state) => state.ordersList);\r\n\r\n    const doneOrders = React.useMemo(\r\n        () => orders.filter((order) => TApiOrderStatus.Done === order.status),\r\n        [orders],\r\n    );\r\n    const pendingOrders = React.useMemo(\r\n        () => orders.filter((order) => TApiOrderStatus.Pending === order.status),\r\n        [orders],\r\n    );\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.orderPanels}>\r\n                <div className={styles.doneOrderPanel}>\r\n                    <p className=\"text text_type_main-medium\">Готовы:</p>\r\n                    <div className={styles.orders}>\r\n                        {doneOrders.map((order) => (\r\n                            <p\r\n                                key={order.number}\r\n                                className=\"text text_type_digits-default text_color_success\"\r\n                            >\r\n                                {order.number}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div className={styles.pendingOrderPanel}>\r\n                    <p className=\"text text_type_main-medium\">В работе:</p>\r\n                    <div className={styles.orders}>\r\n                        {pendingOrders.map((order) => (\r\n                            <p\r\n                                key={order.number}\r\n                                className=\"text text_type_digits-default\"\r\n                            >\r\n                                {order.number}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <p className=\"text text_type_main-medium\">Выполнено за все время:</p>\r\n                <p className={`text text_type_digits-large ${styles.totalShadow}`}>{total}</p>\r\n            </div>\r\n            <div>\r\n                <p className=\"text text_type_main-medium\">Выполнено за сегодня:</p>\r\n                <p className={`text text_type_digits-large ${styles.totalShadow}`}>{totalToday}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrdersStatus;\r\n","export const ORDERS_LIST_CONNECTION_OPEN: 'ORDERS_LIST_CONNECTION_OPEN' = 'ORDERS_LIST_CONNECTION_OPEN';\r\nexport const ORDERS_LIST_CONNECTION_CLOSE: 'ORDERS_LIST_CONNECTION_CLOSE' = 'ORDERS_LIST_CONNECTION_CLOSE';\r\nexport const ORDERS_LIST_CONNECTION_SUCCESS: 'ORDERS_LIST_CONNECTION_SUCCESS' = 'ORDERS_LIST_CONNECTION_SUCCESS';\r\nexport const ORDERS_LIST_CONNECTION_ERROR: 'ORDERS_LIST_CONNECTION_ERROR' = 'ORDERS_LIST_CONNECTION_ERROR';\r\nexport const ORDERS_LIST_CONNECTION_CLOSED: 'ORDERS_LIST_CONNECTION_CLOSED' = 'ORDERS_LIST_CONNECTION_CLOSED';\r\nexport const ORDERS_LIST_RECEIVED: 'ORDERS_LIST_RECEIVED' = 'ORDERS_LIST_RECEIVED';\r\n","import React from 'react';\r\nimport DialogPage from '../../components/dialog-page/dialog-page';\r\nimport ErrorMessage from '../../components/error-message/error-message';\r\nimport OrderCards from '../../components/order-cards/order-cards';\r\nimport OrdersStatus from '../../components/orders-status/orders-status';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport { closeOrdersListConnection, openOrdersListConnection } from '../../services/actions/orders-list';\r\nimport styles from './orders-page.module.css';\r\n\r\nconst OrdersPage = () => {\r\n    const { connectionError, orders } = useSelector((state) => state.ordersList);\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        dispatch(openOrdersListConnection());\r\n        return () => { dispatch(closeOrdersListConnection()); };\r\n    }, [dispatch]);\r\n\r\n    if (connectionError) {\r\n        return (\r\n            <main>\r\n                <DialogPage>\r\n                    <ErrorMessage message={connectionError} />\r\n                </DialogPage>\r\n            </main>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.container}>\r\n                <p className=\"text text_type_main-large\">Лента заказов</p>\r\n                <div className={styles.content}>\r\n                    <div className={styles.list}>\r\n                        <OrderCards orders={orders} />\r\n                    </div>\r\n                    <div className={styles.status}>\r\n                        <OrdersStatus />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrdersPage;\r\n","import {\r\n    ORDERS_LIST_CONNECTION_OPEN,\r\n    ORDERS_LIST_CONNECTION_CLOSE,\r\n} from '../constants/orders-list';\r\nimport {\r\n    IOrdersListConnectionCloseAction,\r\n    IOrdersListConnectionOpenAction,\r\n} from '../types/actions/orders-list';\r\n\r\nexport const openOrdersListConnection = (): IOrdersListConnectionOpenAction => ({\r\n    type: ORDERS_LIST_CONNECTION_OPEN,\r\n});\r\n\r\nexport const closeOrdersListConnection = (): IOrdersListConnectionCloseAction => ({\r\n    type: ORDERS_LIST_CONNECTION_CLOSE,\r\n});\r\n","import React from 'react';\r\nimport { CurrencyIcon } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { TOrder } from '../../services/types';\r\nimport { TApiOrderStatus } from '../../services/types/api';\r\nimport { localizeDate, localizeStatus } from '../../utils/orders';\r\nimport {\r\n    getGroupedIngredientsPrice,\r\n    groupIngredients,\r\n} from '../../utils/ingredients';\r\nimport { useSelector } from '../../services/hooks';\r\nimport styles from './order-info.module.css';\r\n\r\ntype TOrderInfoProps = {\r\n    order: TOrder;\r\n};\r\n\r\nconst OrderInfo: React.FC<TOrderInfoProps> = ({ order }) => {\r\n    const { ingredients } = useSelector((state) => state.ingredientsList);\r\n\r\n    const orderIngredients = React.useMemo(\r\n        () => groupIngredients(order.ingredients, ingredients),\r\n        [order.ingredients, ingredients],\r\n    );\r\n    const orderPrice = React.useMemo(\r\n        () => getGroupedIngredientsPrice(orderIngredients),\r\n        [orderIngredients],\r\n    );\r\n\r\n    const statusClass = TApiOrderStatus.Done === order.status\r\n        ? 'text text_type_main-default mt-2 text_color_success'\r\n        : 'text text_type_main-default mt-2';\r\n    return (\r\n        <div className={styles.main}>\r\n            <p className=\"text text_type_main-medium\">{order.name}</p>\r\n            <p className={statusClass}>{localizeStatus(order.status)}</p>\r\n            <p className=\"text text_type_main-medium mt-15 mb-6\">Состав:</p>\r\n            <div className={`${styles.ingredients} custom-scroll`}>\r\n                {orderIngredients.map((item) => (\r\n                    <div\r\n                        key={item.ingredient.id}\r\n                        className={styles.ingredient}\r\n                    >\r\n                        <div className={styles.label}>\r\n                            <div className={styles.icon}>\r\n                                <img src={item.ingredient.imageMobile} alt={item.ingredient.name} />\r\n                            </div>\r\n                            <p className=\"text text_type_main-default\">{item.ingredient.name}</p>\r\n                        </div>\r\n                        <div className={styles.price}>\r\n                            <p\r\n                                className=\"text text_type_digits-default mr-2\"\r\n                            >\r\n                                {`${item.count} x ${item.ingredient.price}`}\r\n                            </p>\r\n                            <CurrencyIcon type=\"primary\" />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className={styles.footer}>\r\n                <p className=\"text text_type_main-default text_color_inactive\">{localizeDate(order.createdAt)}</p>\r\n                <div className={styles.price}>\r\n                    <p className=\"text text_type_digits-default mr-2\">{orderPrice}</p>\r\n                    <CurrencyIcon type=\"primary\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderInfo;\r\n","export const GET_ORDER_REQUEST: 'GET_ORDER_REQUEST' = 'GET_ORDER_REQUEST';\r\nexport const GET_ORDER_SUCCESS: 'GET_ORDER_SUCCESS' = 'GET_ORDER_SUCCESS';\r\nexport const GET_ORDER_ERROR: 'GET_ORDER_ERROR' = 'GET_ORDER_ERROR';\r\nexport const CLEAR_ORDER: 'CLEAR_ORDER' = 'CLEAR_ORDER';\r\n","import {\r\n    GET_ORDER_REQUEST,\r\n    GET_ORDER_SUCCESS,\r\n    GET_ORDER_ERROR,\r\n    CLEAR_ORDER,\r\n} from '../constants/order-info';\r\nimport { TDispatch, TGetState, TThunk } from '../types/store';\r\nimport { IClearOrderAction } from '../types/actions/order-info';\r\nimport ApiClient from '../api-client';\r\nimport { getErrorMessage } from '../../utils/error';\r\nimport { mapOrder } from '../../utils/orders';\r\n\r\nexport const clearOrder = (): IClearOrderAction => ({\r\n    type: CLEAR_ORDER,\r\n});\r\n\r\nexport const getOrder: TThunk = (orderNumber: string) => async (\r\n    dispatch: TDispatch,\r\n    getState: TGetState,\r\n    apiClient: ApiClient,\r\n) => {\r\n    dispatch({\r\n        type: GET_ORDER_REQUEST,\r\n    });\r\n    try {\r\n        const order = await apiClient.getOrder(orderNumber);\r\n        dispatch({\r\n            type: GET_ORDER_SUCCESS,\r\n            order: mapOrder(order),\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GET_ORDER_ERROR,\r\n            message: getErrorMessage(error),\r\n        });\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport DialogPage from '../../components/dialog-page/dialog-page';\r\nimport OrderInfo from '../../components/order-info/order-info';\r\nimport ErrorMessage from '../../components/error-message/error-message';\r\nimport { clearOrder, getOrder } from '../../services/actions/order-info';\r\nimport styles from './order-info-page.module.css';\r\n\r\ntype TOrderInfoPageParams = {\r\n    id: string;\r\n};\r\n\r\nconst OrderInfoPage = () => {\r\n    const { id } = useParams<TOrderInfoPageParams>();\r\n    const { order, loadError } = useSelector((state) => state.orderInfo);\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        dispatch(getOrder(id));\r\n        return () => { dispatch(clearOrder()); };\r\n    }, [id, dispatch]);\r\n\r\n    if (loadError) {\r\n        return (\r\n            <DialogPage>\r\n                <ErrorMessage message={loadError} />\r\n            </DialogPage>\r\n        );\r\n    }\r\n    if (!order) {\r\n        return <DialogPage />;\r\n    }\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <p className=\"text text_type_digits-default mt-5 mb-5\">{`#${order.number}`}</p>\r\n            <OrderInfo order={order} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderInfoPage;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport Modal from '../modal/modal';\r\nimport OrderInfo from '../order-info/order-info';\r\nimport ErrorDialog from '../error-dialog/error-dialog';\r\nimport { clearOrder, getOrder } from '../../services/actions/order-info';\r\n\r\ntype TOrderInfoDialogProps = {\r\n    onClose: () => void;\r\n};\r\n\r\ntype TOrderInfoDialogParams = {\r\n    id: string;\r\n};\r\n\r\nconst OrderInfoDialog: React.FC<TOrderInfoDialogProps> = ({ onClose }) => {\r\n    const { id } = useParams<TOrderInfoDialogParams>();\r\n    const { order, loadError } = useSelector((state) => state.orderInfo);\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        dispatch(getOrder(id));\r\n        return () => { dispatch(clearOrder()); };\r\n    }, [id, dispatch]);\r\n\r\n    if (loadError) {\r\n        return <ErrorDialog visible message={loadError} onClose={onClose} />;\r\n    }\r\n\r\n    if (!order) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Modal title={`#${order.number}`} visible onClose={onClose}>\r\n            <OrderInfo order={order} />\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default OrderInfoDialog;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport Modal from '../modal/modal';\r\nimport IngredientDetails from '../ingredient-details/ingredient-details';\r\nimport ErrorMessage from '../error-message/error-message';\r\nimport { getIngredient } from '../../utils/ingredients';\r\nimport { hideIngredientDetails, showIngredientDetails } from '../../services/actions/ingredient-details';\r\n\r\ntype TIngredientDetailsDialogProps = {\r\n    visible: boolean;\r\n    onClose: () => void;\r\n};\r\n\r\ntype TIngredientDetailsDialogParams = {\r\n    id: string;\r\n};\r\n\r\nconst IngredientDetailsDialog: React.FC<TIngredientDetailsDialogProps> = ({ visible, onClose }) => {\r\n    const { id } = useParams<TIngredientDetailsDialogParams>();\r\n    const { ingredients } = useSelector((state) => state.ingredientsList);\r\n    const dispatch = useDispatch();\r\n\r\n    const ingredient = React.useMemo(\r\n        () => getIngredient(id, ingredients),\r\n        [id, ingredients],\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        if (ingredient) {\r\n            dispatch(showIngredientDetails(ingredient));\r\n        }\r\n        return () => { dispatch(hideIngredientDetails()); };\r\n    }, [ingredient, dispatch]);\r\n\r\n    return (\r\n        <Modal title=\"Детали ингредиента\" visible={visible} onClose={onClose}>\r\n            {ingredient ? (\r\n                <IngredientDetails ingredient={ingredient} />\r\n            ) : (\r\n                <ErrorMessage message={`Ingredient #${id} is not found`} />\r\n            )}\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default IngredientDetailsDialog;\r\n","import React from 'react';\r\nimport { Redirect, Route, RouteComponentProps } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport { getUser } from '../../services/actions/auth';\r\nimport ApiClient from '../../services/api-client';\r\n\r\ntype TProtectedRouteProps = {\r\n    path: string;\r\n};\r\n\r\nconst ProtectedRoute: React.FC<TProtectedRouteProps> = ({ children, path }) => {\r\n    const { auth } = useSelector((state) => state);\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        if (!auth.user && ApiClient.isAuthenticated()) {\r\n            dispatch(getUser());\r\n        }\r\n    }, [auth.user, dispatch]);\r\n\r\n    if (!auth.user && ApiClient.isAuthenticated() && !auth.loadError) {\r\n        return null;\r\n    }\r\n\r\n    const render = ({ location }: RouteComponentProps): React.ReactNode => {\r\n        if (auth.user) {\r\n            return children;\r\n        }\r\n        return (\r\n            <Redirect\r\n                to={{\r\n                    pathname: '/login',\r\n                    state: { from: location },\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Route\r\n            path={path}\r\n            render={render}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","export const GET_INGREDIENTS_REQUEST: 'GET_INGREDIENTS_REQUEST' = 'GET_INGREDIENTS_REQUEST';\r\nexport const GET_INGREDIENTS_SUCCESS: 'GET_INGREDIENTS_SUCCESS' = 'GET_INGREDIENTS_SUCCESS';\r\nexport const GET_INGREDIENTS_ERROR: 'GET_INGREDIENTS_ERROR' = 'GET_INGREDIENTS_ERROR';\r\n","import React from 'react';\r\nimport { Switch, Route, useLocation, useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from '../../services/hooks';\r\nimport AppHeader from '../app-header/app-header';\r\nimport ConstructorPage from '../../pages/constructor-page/constructor-page';\r\nimport DialogPage from '../dialog-page/dialog-page';\r\nimport IngredientDetailsPage from '../../pages/ingredient-details-page/ingredient-details-page';\r\nimport LoginPage from '../../pages/login-page/login-page';\r\nimport LogoutPage from '../../pages/logout-page/logout-page';\r\nimport ForgotPasswordPage from '../../pages/forgot-password-page/forgot-password-page';\r\nimport ProfileOrdersPage from '../../pages/profile-orders-page/profile-orders-page';\r\nimport ProfilePage from '../../pages/profile-page/profile-page';\r\nimport RegisterPage from '../../pages/register-page/register-page';\r\nimport ResetPasswordPage from '../../pages/reset-password-page/reset-password-page';\r\nimport OrdersPage from '../../pages/orders-page/orders-page';\r\nimport OrderInfoPage from '../../pages/order-info-page/order-info-page';\r\nimport OrderInfoDialog from '../order-info-dialog/order-info-dialog';\r\nimport IngredientDetailsDialog from '../ingredient-details-dialog/ingredient-details-dialog';\r\nimport ErrorMessage from '../error-message/error-message';\r\nimport ProtectedRoute from '../protected-route/protected-route';\r\nimport { TLocationState } from '../../services/types';\r\nimport { getIngredients } from '../../services/actions/ingredients-list';\r\n\r\nconst App = () => {\r\n    const { ingredientsList } = useSelector((state) => state);\r\n    const location = useLocation<TLocationState>();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(\r\n        () => { dispatch(getIngredients()); },\r\n        [dispatch],\r\n    );\r\n\r\n    if (ingredientsList.isLoading) {\r\n        return (\r\n            <main>\r\n                <DialogPage>\r\n                    <p className=\"text text_type_main-medium\">\r\n                        Загрузка...\r\n                    </p>\r\n                </DialogPage>\r\n            </main>\r\n        );\r\n    }\r\n    if (ingredientsList.loadError) {\r\n        return (\r\n            <main>\r\n                <DialogPage>\r\n                    <ErrorMessage message={ingredientsList.loadError} />\r\n                </DialogPage>\r\n            </main>\r\n        );\r\n    }\r\n\r\n    const background = location.state?.background;\r\n\r\n    return (\r\n        <main>\r\n            <AppHeader />\r\n            <Switch location={background || location}>\r\n                <Route path=\"/login\">\r\n                    <LoginPage />\r\n                </Route>\r\n                <Route path=\"/logout\">\r\n                    <LogoutPage />\r\n                </Route>\r\n                <Route path=\"/register\">\r\n                    <RegisterPage />\r\n                </Route>\r\n                <Route path=\"/forgot-password\">\r\n                    <ForgotPasswordPage />\r\n                </Route>\r\n                <Route path=\"/reset-password\">\r\n                    <ResetPasswordPage />\r\n                </Route>\r\n                <Route path=\"/feed/:id\">\r\n                    <OrderInfoPage />\r\n                </Route>\r\n                <Route path=\"/feed\">\r\n                    <OrdersPage />\r\n                </Route>\r\n                <ProtectedRoute path=\"/profile/orders/:id\">\r\n                    <OrderInfoPage />\r\n                </ProtectedRoute>\r\n                <ProtectedRoute path=\"/profile/orders\">\r\n                    <ProfileOrdersPage />\r\n                </ProtectedRoute>\r\n                <ProtectedRoute path=\"/profile\">\r\n                    <ProfilePage />\r\n                </ProtectedRoute>\r\n                <Route path=\"/ingredients/:id\">\r\n                    <IngredientDetailsPage />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <ConstructorPage />\r\n                </Route>\r\n            </Switch>\r\n            {background && (\r\n                <Switch location={location}>\r\n                    <Route path=\"/feed/:id\">\r\n                        <OrderInfoDialog onClose={() => history.goBack()} />\r\n                    </Route>\r\n                    <ProtectedRoute path=\"/profile/orders/:id\">\r\n                        <OrderInfoDialog onClose={() => history.goBack()} />\r\n                    </ProtectedRoute>\r\n                    <Route path=\"/ingredients/:id\">\r\n                        <IngredientDetailsDialog\r\n                            visible\r\n                            onClose={() => history.goBack()}\r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            )}\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import {\r\n    GET_INGREDIENTS_REQUEST,\r\n    GET_INGREDIENTS_SUCCESS,\r\n    GET_INGREDIENTS_ERROR,\r\n} from '../constants/ingredients-list';\r\nimport { TDispatch, TGetState, TThunk } from '../types/store';\r\nimport ApiClient from '../api-client';\r\nimport { getErrorMessage } from '../../utils/error';\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const getIngredients: TThunk = () => async (\r\n    dispatch: TDispatch,\r\n    getState: TGetState,\r\n    apiClient: ApiClient,\r\n) => {\r\n    dispatch({\r\n        type: GET_INGREDIENTS_REQUEST,\r\n    });\r\n    try {\r\n        const ingredients = await apiClient.getIngredients();\r\n        dispatch({\r\n            type: GET_INGREDIENTS_SUCCESS,\r\n            ingredients: ingredients.map((ingredient) => ({\r\n                ...ingredient,\r\n                // eslint-disable-next-line no-underscore-dangle\r\n                id: ingredient._id,\r\n                imageLarge: ingredient.image_large,\r\n                imageMobile: ingredient.image_mobile,\r\n            })),\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GET_INGREDIENTS_ERROR,\r\n            message: getErrorMessage(error),\r\n        });\r\n    }\r\n};\r\n","import {\r\n    REGISTER_USER_REQUEST,\r\n    REGISTER_USER_SUCCESS,\r\n    REGISTER_USER_ERROR,\r\n    LOGIN_USER_REQUEST,\r\n    LOGIN_USER_SUCCESS,\r\n    LOGIN_USER_ERROR,\r\n    LOGOUT_USER_REQUEST,\r\n    LOGOUT_USER_SUCCESS,\r\n    LOGOUT_USER_ERROR,\r\n    GET_USER_REQUEST,\r\n    GET_USER_SUCCESS,\r\n    GET_USER_ERROR,\r\n    UPDATE_USER_REQUEST,\r\n    UPDATE_USER_SUCCESS,\r\n    UPDATE_USER_ERROR,\r\n} from '../constants/auth';\r\nimport { TApiUserInfo } from '../types/api';\r\nimport { TAuthActions } from '../types/actions/auth';\r\n\r\nexport type TAuthState = {\r\n    user: TApiUserInfo | null;\r\n    isRegistering: boolean;\r\n    registrationError: string | null;\r\n    isLoggingIn: boolean;\r\n    loginError: string | null;\r\n    isLoggingOut: boolean;\r\n    logoutError: string | null;\r\n    isLoading: boolean;\r\n    loadError: string | null;\r\n    isUpdating: boolean;\r\n    updateError: string | null;\r\n};\r\n\r\nconst initialState: TAuthState = {\r\n    user: null,\r\n    isRegistering: false,\r\n    registrationError: null,\r\n    isLoggingIn: false,\r\n    loginError: null,\r\n    isLoggingOut: false,\r\n    logoutError: null,\r\n    isLoading: true,\r\n    loadError: null,\r\n    isUpdating: true,\r\n    updateError: null,\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/default-param-last\r\nexport const authReducer = (state: TAuthState = initialState, action: TAuthActions): TAuthState => {\r\n    switch (action.type) {\r\n    case REGISTER_USER_REQUEST: {\r\n        return {\r\n            ...state,\r\n            isRegistering: true,\r\n        };\r\n    }\r\n    case REGISTER_USER_SUCCESS: {\r\n        return {\r\n            ...initialState,\r\n            user: action.user,\r\n        };\r\n    }\r\n    case REGISTER_USER_ERROR: {\r\n        return {\r\n            ...initialState,\r\n            registrationError: action.message,\r\n        };\r\n    }\r\n    case LOGIN_USER_REQUEST: {\r\n        return {\r\n            ...state,\r\n            isLoggingIn: true,\r\n        };\r\n    }\r\n    case LOGIN_USER_SUCCESS: {\r\n        return {\r\n            ...initialState,\r\n            user: action.user,\r\n        };\r\n    }\r\n    case LOGIN_USER_ERROR: {\r\n        return {\r\n            ...initialState,\r\n            loginError: action.message,\r\n        };\r\n    }\r\n    case LOGOUT_USER_REQUEST: {\r\n        return {\r\n            ...state,\r\n            isLoggingOut: true,\r\n            logoutError: null,\r\n        };\r\n    }\r\n    case LOGOUT_USER_SUCCESS: {\r\n        return {\r\n            ...initialState,\r\n        };\r\n    }\r\n    case LOGOUT_USER_ERROR: {\r\n        return {\r\n            ...state,\r\n            isLoggingOut: false,\r\n            logoutError: action.message,\r\n        };\r\n    }\r\n    case GET_USER_REQUEST: {\r\n        return {\r\n            ...state,\r\n            isLoading: true,\r\n        };\r\n    }\r\n    case GET_USER_SUCCESS: {\r\n        return {\r\n            ...state,\r\n            user: action.user,\r\n            isLoading: false,\r\n            loadError: null,\r\n        };\r\n    }\r\n    case GET_USER_ERROR: {\r\n        return {\r\n            ...state,\r\n            isLoading: false,\r\n            loadError: action.message,\r\n        };\r\n    }\r\n    case UPDATE_USER_REQUEST: {\r\n        return {\r\n            ...state,\r\n            isUpdating: true,\r\n        };\r\n    }\r\n    case UPDATE_USER_SUCCESS: {\r\n        return {\r\n            ...state,\r\n            user: action.user,\r\n            isUpdating: false,\r\n            updateError: null,\r\n        };\r\n    }\r\n    case UPDATE_USER_ERROR: {\r\n        return {\r\n            ...state,\r\n            isUpdating: false,\r\n            updateError: action.message,\r\n        };\r\n    }\r\n    default: {\r\n        return state;\r\n    }\r\n    }\r\n};\r\n","import {\r\n    SET_BUN,\r\n    ADD_INGREDIENT,\r\n    REMOVE_INGREDIENT,\r\n    REMOVE_INGREDIENTS,\r\n    MOVE_INGREDIENT,\r\n} from '../constants/constructor';\r\nimport { TIngredients } from '../types';\r\nimport { TConstructorActions } from '../types/actions/constructor';\r\nimport { getBun } from '../../utils/ingredients';\r\n\r\nexport type TConstructorState = {\r\n    ingredients: TIngredients;\r\n};\r\n\r\nconst initialState: TConstructorState = {\r\n    ingredients: [],\r\n};\r\n\r\nexport const constructorReducer = (\r\n    // eslint-disable-next-line @typescript-eslint/default-param-last\r\n    state: TConstructorState = initialState,\r\n    action: TConstructorActions,\r\n): TConstructorState => {\r\n    switch (action.type) {\r\n    case SET_BUN: {\r\n        const ingredients = getBun(state.ingredients)\r\n            ? [action.bun, ...state.ingredients.slice(1, state.ingredients.length - 1), action.bun]\r\n            : [action.bun, ...state.ingredients, action.bun];\r\n        return {\r\n            ...state,\r\n            ingredients,\r\n        };\r\n    }\r\n    case ADD_INGREDIENT: {\r\n        const ingredients = [...state.ingredients];\r\n        const index = action.index === 0 && getBun(state.ingredients) ? 1 : action.index;\r\n        ingredients.splice(index, 0, action.ingredient);\r\n        return {\r\n            ...state,\r\n            ingredients,\r\n        };\r\n    }\r\n    case REMOVE_INGREDIENT: {\r\n        return {\r\n            ...state,\r\n            ingredients: state.ingredients.filter((ingredient, index) => index !== action.index),\r\n        };\r\n    }\r\n    case REMOVE_INGREDIENTS: {\r\n        return {\r\n            ...state,\r\n            ingredients: [],\r\n        };\r\n    }\r\n    case MOVE_INGREDIENT: {\r\n        const ingredients = [...state.ingredients];\r\n        const [ingredient] = ingredients.splice(action.oldIndex, 1);\r\n        let { newIndex } = action;\r\n        if (newIndex === 0 && getBun(state.ingredients)) {\r\n            newIndex += 1;\r\n        } else if (newIndex === state.ingredients.length - 1 && getBun(state.ingredients)) {\r\n            newIndex -= 1;\r\n        }\r\n        ingredients.splice(newIndex, 0, ingredient);\r\n        return {\r\n            ...state,\r\n            ingredients,\r\n        };\r\n    }\r\n    default: {\r\n        return state;\r\n    }\r\n    }\r\n};\r\n","import {\r\n    SHOW_INGREDIENT_DETAILS,\r\n    HIDE_INGREDIENT_DETAILS,\r\n} from '../constants/ingredient-details';\r\nimport { TIngredient } from '../types';\r\nimport { TIngredientDetailsActions } from '../types/actions/ingredient-details';\r\n\r\nexport type TIngredientDetailsState = {\r\n    ingredient: TIngredient | null;\r\n};\r\n\r\nconst initialState: TIngredientDetailsState = {\r\n    ingredient: null,\r\n};\r\n\r\nexport const ingredientDetailsReducer = (\r\n    // eslint-disable-next-line @typescript-eslint/default-param-last\r\n    state: TIngredientDetailsState = initialState,\r\n    action: TIngredientDetailsActions,\r\n): TIngredientDetailsState => {\r\n    switch (action.type) {\r\n    case SHOW_INGREDIENT_DETAILS: {\r\n        return {\r\n            ...state,\r\n            ingredient: action.ingredient,\r\n        };\r\n    }\r\n    case HIDE_INGREDIENT_DETAILS: {\r\n        return {\r\n            ...state,\r\n            ingredient: null,\r\n        };\r\n    }\r\n    default: {\r\n        return state;\r\n    }\r\n    }\r\n};\r\n","import {\r\n    GET_INGREDIENTS_REQUEST,\r\n    GET_INGREDIENTS_SUCCESS,\r\n    GET_INGREDIENTS_ERROR,\r\n} from '../constants/ingredients-list';\r\nimport { TIngredients } from '../types';\r\nimport { TIngredientsListActions } from '../types/actions/ingredients-list';\r\n\r\nexport type TIngredientsListState = {\r\n    ingredients: TIngredients;\r\n    isLoading: boolean;\r\n    loadError: string | null;\r\n};\r\n\r\nconst initialState: TIngredientsListState = {\r\n    ingredients: [],\r\n    isLoading: true,\r\n    loadError: null,\r\n};\r\n\r\nexport const ingredientsListReducer = (\r\n    // eslint-disable-next-line @typescript-eslint/default-param-last\r\n    state: TIngredientsListState = initialState,\r\n    action: TIngredientsListActions,\r\n): TIngredientsListState => {\r\n    switch (action.type) {\r\n    case GET_INGREDIENTS_REQUEST: {\r\n        return {\r\n            ...state,\r\n            isLoading: true,\r\n        };\r\n    }\r\n    case GET_INGREDIENTS_SUCCESS: {\r\n        return {\r\n            ...state,\r\n            isLoading: false,\r\n            loadError: null,\r\n            ingredients: action.ingredients,\r\n        };\r\n    }\r\n    case GET_INGREDIENTS_ERROR: {\r\n        return {\r\n            ...initialState,\r\n            isLoading: false,\r\n            loadError: action.message,\r\n        };\r\n    }\r\n    default: {\r\n        return state;\r\n    }\r\n    }\r\n};\r\n","import {\r\n    CREATE_ORDER_REQUEST,\r\n    CREATE_ORDER_SUCCESS,\r\n    CREATE_ORDER_ERROR,\r\n} from '../constants/order';\r\nimport { TCreateOrderActions } from '../types/actions/order';\r\n\r\nexport type TOrderState = {\r\n    name: string | null;\r\n    number: string | null;\r\n    isCreating: boolean;\r\n    creationError: string | null;\r\n};\r\n\r\nconst initialState: TOrderState = {\r\n    name: null,\r\n    number: null,\r\n    isCreating: false,\r\n    creationError: null,\r\n};\r\n\r\nexport const orderReducer = (\r\n    // eslint-disable-next-line @typescript-eslint/default-param-last\r\n    state: TOrderState = initialState,\r\n    action: TCreateOrderActions,\r\n): TOrderState => {\r\n    switch (action.type) {\r\n    case CREATE_ORDER_REQUEST: {\r\n        return {\r\n            ...state,\r\n            isCreating: true,\r\n        };\r\n    }\r\n    case CREATE_ORDER_SUCCESS: {\r\n        return {\r\n            ...state,\r\n            name: action.name,\r\n            number: action.number,\r\n            isCreating: false,\r\n            creationError: null,\r\n        };\r\n    }\r\n    case CREATE_ORDER_ERROR: {\r\n        return {\r\n            ...initialState,\r\n            creationError: action.message,\r\n        };\r\n    }\r\n    default: {\r\n        return state;\r\n    }\r\n    }\r\n};\r\n","import {\r\n    GET_ORDER_REQUEST,\r\n    GET_ORDER_SUCCESS,\r\n    GET_ORDER_ERROR,\r\n    CLEAR_ORDER,\r\n} from '../constants/order-info';\r\nimport { TOrder } from '../types';\r\nimport { TGetOrderActions } from '../types/actions/order-info';\r\n\r\nexport type TOrderInfoState = {\r\n    order: TOrder | null;\r\n    isLoading: boolean;\r\n    loadError: string | null;\r\n};\r\n\r\nconst initialState: TOrderInfoState = {\r\n    order: null,\r\n    isLoading: true,\r\n    loadError: null,\r\n};\r\n\r\nexport const orderInfoReducer = (\r\n    // eslint-disable-next-line @typescript-eslint/default-param-last\r\n    state: TOrderInfoState = initialState,\r\n    action: TGetOrderActions,\r\n): TOrderInfoState => {\r\n    switch (action.type) {\r\n    case GET_ORDER_REQUEST: {\r\n        return {\r\n            ...state,\r\n            isLoading: true,\r\n        };\r\n    }\r\n    case GET_ORDER_SUCCESS: {\r\n        return {\r\n            ...state,\r\n            isLoading: false,\r\n            loadError: null,\r\n            order: action.order,\r\n        };\r\n    }\r\n    case GET_ORDER_ERROR: {\r\n        return {\r\n            ...initialState,\r\n            isLoading: false,\r\n            loadError: action.message,\r\n        };\r\n    }\r\n    case CLEAR_ORDER: {\r\n        return initialState;\r\n    }\r\n    default: {\r\n        return state;\r\n    }\r\n    }\r\n};\r\n","import {\r\n    ORDERS_LIST_CONNECTION_SUCCESS,\r\n    ORDERS_LIST_CONNECTION_ERROR,\r\n    ORDERS_LIST_CONNECTION_CLOSED,\r\n    ORDERS_LIST_RECEIVED,\r\n    ORDERS_LIST_CONNECTION_CLOSE,\r\n} from '../constants/orders-list';\r\nimport { TOrders } from '../types';\r\nimport { TOrdersListActions } from '../types/actions/orders-list';\r\nimport { mapOrders } from '../../utils/orders';\r\n\r\nexport type TOrdersListState = {\r\n    orders: TOrders;\r\n    total: number,\r\n    totalToday: number,\r\n    isConnected: boolean;\r\n    connectionError: string | null;\r\n};\r\n\r\nconst initialState: TOrdersListState = {\r\n    orders: [],\r\n    total: 0,\r\n    totalToday: 0,\r\n    isConnected: false,\r\n    connectionError: null,\r\n};\r\n\r\nexport const ordersListReducer = (\r\n    // eslint-disable-next-line @typescript-eslint/default-param-last\r\n    state: TOrdersListState = initialState,\r\n    action: TOrdersListActions,\r\n): TOrdersListState => {\r\n    switch (action.type) {\r\n    case ORDERS_LIST_CONNECTION_CLOSE: {\r\n        return {\r\n            ...state,\r\n            isConnected: false,\r\n            connectionError: null,\r\n        };\r\n    }\r\n    case ORDERS_LIST_CONNECTION_SUCCESS: {\r\n        return {\r\n            ...state,\r\n            isConnected: true,\r\n            connectionError: null,\r\n        };\r\n    }\r\n    case ORDERS_LIST_CONNECTION_ERROR: {\r\n        return {\r\n            ...state,\r\n            connectionError: action.message,\r\n        };\r\n    }\r\n    case ORDERS_LIST_CONNECTION_CLOSED: {\r\n        if (action.message) {\r\n            return {\r\n                ...initialState,\r\n                connectionError: state.connectionError || action.message,\r\n            };\r\n        }\r\n        return {\r\n            ...state,\r\n            isConnected: false,\r\n        };\r\n    }\r\n    case ORDERS_LIST_RECEIVED: {\r\n        return {\r\n            ...state,\r\n            orders: mapOrders(action.data.orders),\r\n            total: action.data.total,\r\n            totalToday: action.data.totalToday,\r\n        };\r\n    }\r\n    default: {\r\n        return state;\r\n    }\r\n    }\r\n};\r\n","import {\r\n    USER_ORDERS_LIST_CONNECTION_SUCCESS,\r\n    USER_ORDERS_LIST_CONNECTION_ERROR,\r\n    USER_ORDERS_LIST_CONNECTION_CLOSED,\r\n    USER_ORDERS_LIST_RECEIVED,\r\n    USER_ORDERS_LIST_CONNECTION_CLOSE,\r\n} from '../constants/user-orders-list';\r\nimport { TOrders } from '../types';\r\nimport { TUserOrdersListActions } from '../types/actions/user-orders-list';\r\nimport { mapOrders } from '../../utils/orders';\r\n\r\nexport type TUserOrdersListState = {\r\n    orders: TOrders;\r\n    isConnected: boolean;\r\n    connectionError: string | null;\r\n};\r\n\r\nconst initialState: TUserOrdersListState = {\r\n    orders: [],\r\n    isConnected: false,\r\n    connectionError: null,\r\n};\r\n\r\nexport const userOrdersListReducer = (\r\n    // eslint-disable-next-line @typescript-eslint/default-param-last\r\n    state: TUserOrdersListState = initialState,\r\n    action: TUserOrdersListActions,\r\n): TUserOrdersListState => {\r\n    switch (action.type) {\r\n    case USER_ORDERS_LIST_CONNECTION_CLOSE: {\r\n        return {\r\n            ...state,\r\n            isConnected: false,\r\n            connectionError: null,\r\n        };\r\n    }\r\n    case USER_ORDERS_LIST_CONNECTION_SUCCESS: {\r\n        return {\r\n            ...state,\r\n            isConnected: true,\r\n            connectionError: null,\r\n        };\r\n    }\r\n    case USER_ORDERS_LIST_CONNECTION_ERROR: {\r\n        return {\r\n            ...state,\r\n            connectionError: action.message,\r\n        };\r\n    }\r\n    case USER_ORDERS_LIST_CONNECTION_CLOSED: {\r\n        if (action.message) {\r\n            return {\r\n                ...initialState,\r\n                connectionError: state.connectionError || action.message,\r\n            };\r\n        }\r\n        return {\r\n            ...state,\r\n            isConnected: false,\r\n        };\r\n    }\r\n    case USER_ORDERS_LIST_RECEIVED: {\r\n        return {\r\n            ...state,\r\n            orders: mapOrders(action.data.orders.reverse()),\r\n        };\r\n    }\r\n    default: {\r\n        return state;\r\n    }\r\n    }\r\n};\r\n","import {\r\n    SEND_RESET_USER_PASSWORD_EMAIL_REQUEST,\r\n    SEND_RESET_USER_PASSWORD_EMAIL_SUCCESS,\r\n    SEND_RESET_USER_PASSWORD_EMAIL_ERROR,\r\n    RESET_EMAIL_SENT,\r\n    RESET_USER_PASSWORD_REQUEST,\r\n    RESET_USER_PASSWORD_SUCCESS,\r\n    RESET_USER_PASSWORD_ERROR,\r\n    RESET_PASSWORD_RESET,\r\n} from '../constants/reset-password';\r\nimport { TResetPasswordActions } from '../types/actions/reset-password';\r\n\r\nexport type TResetPasswordState = {\r\n    isEmailSent: boolean;\r\n    isSendingEmail: boolean;\r\n    sendingEmailError: string | null;\r\n    isPasswordReset: boolean;\r\n    isResettingPassword: boolean;\r\n    resetPasswordError: string | null;\r\n};\r\n\r\nconst initialState: TResetPasswordState = {\r\n    isEmailSent: false,\r\n    isSendingEmail: false,\r\n    sendingEmailError: null,\r\n    isPasswordReset: false,\r\n    isResettingPassword: false,\r\n    resetPasswordError: null,\r\n};\r\n\r\nexport const resetPasswordReducer = (\r\n    // eslint-disable-next-line @typescript-eslint/default-param-last\r\n    state: TResetPasswordState = initialState,\r\n    action: TResetPasswordActions,\r\n): TResetPasswordState => {\r\n    switch (action.type) {\r\n    case SEND_RESET_USER_PASSWORD_EMAIL_REQUEST: {\r\n        return {\r\n            ...state,\r\n            isSendingEmail: true,\r\n        };\r\n    }\r\n    case SEND_RESET_USER_PASSWORD_EMAIL_SUCCESS: {\r\n        return {\r\n            ...initialState,\r\n            isEmailSent: true,\r\n        };\r\n    }\r\n    case SEND_RESET_USER_PASSWORD_EMAIL_ERROR: {\r\n        return {\r\n            ...initialState,\r\n            sendingEmailError: action.message,\r\n        };\r\n    }\r\n    case RESET_EMAIL_SENT: {\r\n        return {\r\n            ...initialState,\r\n        };\r\n    }\r\n    case RESET_USER_PASSWORD_REQUEST: {\r\n        return {\r\n            ...state,\r\n            isResettingPassword: true,\r\n        };\r\n    }\r\n    case RESET_USER_PASSWORD_SUCCESS: {\r\n        return {\r\n            ...initialState,\r\n            isPasswordReset: true,\r\n        };\r\n    }\r\n    case RESET_USER_PASSWORD_ERROR: {\r\n        return {\r\n            ...initialState,\r\n            resetPasswordError: action.message,\r\n        };\r\n    }\r\n    case RESET_PASSWORD_RESET: {\r\n        return {\r\n            ...initialState,\r\n        };\r\n    }\r\n    default: {\r\n        return state;\r\n    }\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { authReducer } from './auth';\r\nimport { constructorReducer } from './constructor';\r\nimport { ingredientDetailsReducer } from './ingredient-details';\r\nimport { ingredientsListReducer } from './ingredients-list';\r\nimport { orderReducer } from './order';\r\nimport { orderInfoReducer } from './order-info';\r\nimport { ordersListReducer } from './orders-list';\r\nimport { userOrdersListReducer } from './user-orders-list';\r\nimport { resetPasswordReducer } from './reset-password';\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    burgerConstructor: constructorReducer,\r\n    ingredientDetails: ingredientDetailsReducer,\r\n    ingredientsList: ingredientsListReducer,\r\n    order: orderReducer,\r\n    orderInfo: orderInfoReducer,\r\n    ordersList: ordersListReducer,\r\n    userOrdersList: userOrdersListReducer,\r\n    resetPassword: resetPasswordReducer,\r\n});\r\n","import type { Middleware, MiddlewareAPI } from 'redux';\r\nimport type { TApplicationActions, TDispatch, TRootState, TSocketActions } from '../types/store';\r\n\r\n// eslint-disable-next-line import/prefer-default-export,max-len\r\nexport const socketMiddleware = (createSocket: () => WebSocket, wsActions: TSocketActions): Middleware => ((\r\n    store: MiddlewareAPI<TDispatch, TRootState>,\r\n) => {\r\n    let socket: WebSocket | null = null;\r\n\r\n    return (next) => (action: TApplicationActions) => {\r\n        const { dispatch } = store;\r\n        const { type } = action;\r\n        const { open, close, onOpen, onClose, onError, onMessage } = wsActions;\r\n\r\n        if (type === open) {\r\n            socket = createSocket();\r\n            socket.onopen = () => {\r\n                dispatch({ type: onOpen });\r\n            };\r\n            socket.onerror = () => {\r\n                dispatch({ type: onError, message: null });\r\n            };\r\n            socket.onclose = (event) => {\r\n                if (event.wasClean) {\r\n                    dispatch({ type: onClose, message: null });\r\n                } else {\r\n                    const message = 'Произошло неожиданное закрытие соединения'\r\n                        + `: Код состояния WebSocket - ${event.code}`;\r\n                    dispatch({ type: onClose, message });\r\n                }\r\n            };\r\n            socket.onmessage = (event) => {\r\n                const { success, message, ...data } = JSON.parse(event.data);\r\n                if (success) {\r\n                    dispatch({ type: onMessage, data });\r\n                } else {\r\n                    dispatch({\r\n                        type: onError,\r\n                        message: message || 'Произошла неожиданная ошибка обработки запроса WebSocket',\r\n                    });\r\n                }\r\n            };\r\n        } else if (type === close && socket) {\r\n            socket.onerror = null;\r\n            socket.onclose = null;\r\n            socket.onmessage = null;\r\n            if (socket.CONNECTING === socket.readyState) {\r\n                socket.onopen = (event) => {\r\n                    (event.currentTarget as WebSocket).close();\r\n                };\r\n            } else if (socket.OPEN === socket.readyState) {\r\n                socket.close();\r\n            }\r\n            socket = null;\r\n        }\r\n        next(action);\r\n    };\r\n}) as Middleware;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport ApiClient from './api-client';\r\nimport { rootReducer } from './reducers';\r\nimport { socketMiddleware } from './middleware/socket-middleware';\r\nimport {\r\n    ORDERS_LIST_CONNECTION_OPEN,\r\n    ORDERS_LIST_CONNECTION_CLOSE,\r\n    ORDERS_LIST_CONNECTION_SUCCESS,\r\n    ORDERS_LIST_CONNECTION_ERROR,\r\n    ORDERS_LIST_CONNECTION_CLOSED,\r\n    ORDERS_LIST_RECEIVED,\r\n} from './constants/orders-list';\r\nimport {\r\n    USER_ORDERS_LIST_CONNECTION_OPEN,\r\n    USER_ORDERS_LIST_CONNECTION_CLOSE,\r\n    USER_ORDERS_LIST_CONNECTION_SUCCESS,\r\n    USER_ORDERS_LIST_CONNECTION_ERROR,\r\n    USER_ORDERS_LIST_CONNECTION_CLOSED,\r\n    USER_ORDERS_LIST_RECEIVED,\r\n} from './constants/user-orders-list';\r\n\r\nconst API_URL = 'https://norma.nomoreparties.space/api';\r\nconst WS_URL = 'wss://norma.nomoreparties.space';\r\nconst apiClient = new ApiClient({ url: API_URL, wsUrl: WS_URL });\r\n\r\nconst ordersListActions = {\r\n    open: ORDERS_LIST_CONNECTION_OPEN,\r\n    close: ORDERS_LIST_CONNECTION_CLOSE,\r\n    onOpen: ORDERS_LIST_CONNECTION_SUCCESS,\r\n    onClose: ORDERS_LIST_CONNECTION_CLOSED,\r\n    onError: ORDERS_LIST_CONNECTION_ERROR,\r\n    onMessage: ORDERS_LIST_RECEIVED,\r\n};\r\nconst userOrdersListActions = {\r\n    open: USER_ORDERS_LIST_CONNECTION_OPEN,\r\n    close: USER_ORDERS_LIST_CONNECTION_CLOSE,\r\n    onOpen: USER_ORDERS_LIST_CONNECTION_SUCCESS,\r\n    onClose: USER_ORDERS_LIST_CONNECTION_CLOSED,\r\n    onError: USER_ORDERS_LIST_CONNECTION_ERROR,\r\n    onMessage: USER_ORDERS_LIST_RECEIVED,\r\n};\r\n\r\nconst enhancer = composeWithDevTools(applyMiddleware(\r\n    thunk.withExtraArgument(apiClient),\r\n    socketMiddleware(() => apiClient.createOrdersSocket(), ordersListActions),\r\n    socketMiddleware(() => apiClient.createUserOrdersSocket(), userOrdersListActions),\r\n));\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const store = createStore(rootReducer, enhancer);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport App from './components/app/app';\r\nimport { store } from './services/store';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <Router basename={process.env.PUBLIC_URL}>\r\n                <App />\r\n            </Router>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"links\":\"login-page_links__3ENDR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"order-card_card__2brCJ\",\"header\":\"order-card_header__5kdVx\",\"footer\":\"order-card_footer__26MHV\",\"price\":\"order-card_price__3kvbl\",\"icons\":\"order-card_icons__GuH-9\",\"icon\":\"order-card_icon__2rrpo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"app-header_header__2OZxD\",\"headerContent\":\"app-header_headerContent__2m5gd\",\"leftNav\":\"app-header_leftNav__Yc1RR\",\"rightNav\":\"app-header_rightNav__1681O\",\"logo\":\"app-header_logo__1L_6H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"modal_main__erplU\",\"title\":\"modal_title__18TBm\",\"closeArea\":\"modal_closeArea__3bq97\",\"closeIcon\":\"modal_closeIcon__11eqR\",\"content\":\"modal_content__Vbfb_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"burger-constructor_main__2pi_T\",\"dropArea\":\"burger-constructor_dropArea__1mA-o\",\"submit\":\"burger-constructor_submit__MlLPx\",\"total\":\"burger-constructor_total__1SDlJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"details\":\"ingredient-details_details__aSShi\",\"detail\":\"ingredient-details_detail__rYup2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"profile-page_main__IlbHg\",\"container\":\"profile-page_container__3ERRx\",\"menu\":\"profile-page_menu__qMpnb\",\"form\":\"profile-page_form__3xjM8\",\"space\":\"profile-page_space__3SXFO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"orders-page_main__2k4AQ\",\"container\":\"orders-page_container__3Z07I\",\"content\":\"orders-page_content__jB2bt\",\"list\":\"orders-page_list__fyNJs\",\"status\":\"orders-page_status__2iDEq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"profile-orders-page_main__2wHq8\",\"container\":\"profile-orders-page_container__3P3oT\",\"menu\":\"profile-orders-page_menu__3Y8CV\",\"orders\":\"profile-orders-page_orders__38dSm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"ingredient-card_main__MXewe\",\"price\":\"ingredient-card_price__2yNO5\",\"name\":\"ingredient-card_name__27PBy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"profile-menu_main__23Dsn\",\"menuItem\":\"profile-menu_menuItem__37TWh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"constructor-element_main__29fJ6\",\"optional\":\"constructor-element_optional__1_AW3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"constructor-elements_main__HlZKa\",\"optionalItems\":\"constructor-elements_optionalItems__3Do19\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"burger-ingredients_main___Nj9R\",\"cards\":\"burger-ingredients_cards__rdQZ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"app-nav-link_main__13W3K\"};"],"sourceRoot":""}